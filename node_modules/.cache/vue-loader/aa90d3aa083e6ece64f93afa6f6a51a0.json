{"remainingRequest":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/wsss/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/news.vue?vue&type=template&id=77fb64f4&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/news.vue","mtime":1685602206000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAibWFpbi1jb250ZW50IiB9LAogICAgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAic2l0ZSBhd2FyZHMiLCBhdHRyczogeyBpZDogInBhZ2UiIH0gfSwKICAgICAgICBbX2MoIk1haW5IZWFkZXIiKSwgX3ZtLl9tKDApXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJNYWluRm9vdGVyIikKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci13c3MiLCBhdHRyczogeyBpZDogIiIgfSB9LCBbCiAgICAgIF9jKAogICAgICAgICJzZWN0aW9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInBhZ2Utc2VjdGlvbiBsYXlvdXQtZW5naW5lLXNlY3Rpb24gYmFja2dyb3VuZC13aWR0aC0tZnVsbC1ibGVlZCBob3Jpem9udGFsLWFsaWdubWVudC0tY2VudGVyIHZlcnRpY2FsLWFsaWdubWVudC0tYm90dG9tIGJsYWNrIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtaW4taGVpZ2h0IjogIjg1dmgiLCAicGFkZGluZy10b3AiOiAiMTIwLjE0MXB4IiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tYm9yZGVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi1iYWNrZ3JvdW5kIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInNxcy12aWRlby1iYWNrZ3JvdW5kLW5hdGl2ZSBjb250ZW50LWZpbGwiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJzcXMtdmlkZW8tYmFja2dyb3VuZC1uYXRpdmVfX2ZhbGxiYWNrLWltYWdlIHNxcy12aWRlby1iYWNrZ3JvdW5kLW5hdGl2ZV9fZmFsbGJhY2staW1hZ2UtLWhpZGRlbiIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm9iamVjdC1wb3NpdGlvbiI6ICJ0b3AiLAogICAgICAgICAgICAgICAgICAgICAgICAib2JqZWN0LWZpdCI6ICJjb3ZlciIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvaW1hZ2UvaW1nMi5qcGciIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW50LXdyYXBwZXIiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiY2FsYyg3NXZtYXggLyA1KSIsCiAgICAgICAgICAgICAgICAianVzdGlmeS1jb250ZW50IjogImZsZXgtc3RhcnQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW50IiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1heC13aWR0aCI6ICI1MjBweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInNxcy1sYXlvdXQgc3FzLWdyaWQtMTIgY29sdW1ucy0xMiIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBzcXMtcm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIHNxcy1jb2wtNyBwLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzcXMtYmxvY2stY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImgxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIndoaXRlLXNwYWNlIjogInByZS13cmFwIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgcG9zaXRvbjogInJlbGF0aXZlIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTmV3cyIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzcXNydGUtbGFyZ2UiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAid2hpdGUtc3BhY2UiOiAicHJlLXdyYXAiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQW4gVW5kZXJ0YWtpbmcgb2YgdGhlIENhdGhvbGljIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5LiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXMtYmxvY2sgYnV0dG9uLWJsb2NrIHNxcy1ibG9jay1idXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNxcy1ibG9jay1jb250ZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAieXVpXzNfMTdfMl8xXzE2Nzg2ODQ0Mjk3MTJfMzU0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3FzLWJsb2NrLWJ1dHRvbi1jb250YWluZXIgc3FzLWJsb2NrLWJ1dHRvbi1jb250YWluZXItLWxlZnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxcy1ibG9jay1idXR0b24tZWxlbWVudC0tbWVkaXVtIHNxcy1idXR0b24tZWxlbWVudC0tcHJpbWFyeSBzcXMtYmxvY2stYnV0dG9uLWVsZW1lbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiY29udGFjdCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgRm9yIG1vcmUgSW5mb3JtYXRpb25zLCBDb250YWN0IFVzIOKAuiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInNlY3Rpb24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAicGFnZS1zZWN0aW9uIGxheW91dC1lbmdpbmUtc2VjdGlvbiBiYWNrZ3JvdW5kLXdpZHRoLS1mdWxsLWJsZWVkIGhvcml6b250YWwtYWxpZ25tZW50LS1jZW50ZXIgdmVydGljYWwtYWxpZ25tZW50LS1taWRkbGUgIHdoaXRlIgogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW50LXdyYXBwZXIgY29udGFpbmVyIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgInBhZGRpbmctdG9wIjogImNhbGMoNTB2bWF4IC8gMTApIiwKICAgICAgICAgICAgICAgICJwYWRkaW5nLWJvdHRvbSI6ICJjYWxjKDUwdm1heCAvIDEwKSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInNxcy1sYXlvdXQgc3FzLWdyaWQtMTIgY29sdW1ucy0xMiIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHNxcy1yb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIHNwYW4tMTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNxcy1ibG9jay1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIwcHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJXU1NTIElTIEZPUk1JTkcgMjAwIEpPSU5UIExJQUJJTElUWSBHUk9VUFMgKEpMR1MpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHksIHdpdGggdGhlIGZpbmFuY2lhbCBhc3Npc3RhbmNlIG9mIE5BQkFSRCwgMjAwIEpvaW50IExpYWJpbGl0eSBDb21taXR0ZWVzIChKTEdzKSB3aWxsIGJlIHNldCB1cCBpbiBXYXlhbmFkIERpc3RyaWN0LiBXaXRoIHRoaXMsIGl0IGlzIHBvc3NpYmxlIHRvIHN0YXJ0IDIwMCBncm91cCBsZXZlbCB2ZW50dXJlcy4gSm9pbnQgbGlhYmlsaXR5IGdyb3VwcyBjb25zaXN0IG9mIGZvdXIgdG8gMTAgbWVtYmVycy4gVGhlIHNjaGVtZSBpcyBiZWluZyBpbXBsZW1lbnRlZCB3aXRoIHRoZSBvYmplY3RpdmUgb2YgbGF1bmNoaW5nIHZhcmlvdXMgSUdQcyBvbiBhIGdyb3VwIGJhc2lzLCB0aGVyZWJ5IGVuc3VyaW5nIGEgc3RlYWR5IGluY29tZSBmb3IgdGhlIGZpbmFuY2lhbGx5IGJhY2t3YXJkIGZhbWlsaWVzLiBUaGUgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IHdpbGwgcHJvdmlkZSB0cmFpbmluZyB0byB0aGUgZ3JvdXBzIGludm9sdmVkIGluIHRoZSBzY2hlbWUsIGluY2x1ZGluZyB0aGUgdHJhaW5pbmcgcmVxdWlyZWQgYmVmb3JlIHN0YXJ0aW5nIGVxdWl0eSBncm91cHMsIHRoZSByZXF1aXJlZCByZWNvcmRzIGFuZCB0aGUgcHJvamVjdHMgcmVxdWlyZWQgdG8gb2J0YWluIGEgbG9hbiBmcm9tIHRoZSBiYW5rLiBUaGUgc2NoZW1lIGlzIGJlaW5nIGltcGxlbWVudGVkIGluIGFzc29jaWF0aW9uIHdpdGggS2VyYWxhIEJhbmssIENhbmFyYSBCYW5rIGFuZCBLZXJhbGEgR3JhbWVlbiBCYW5rLiBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRnIuLiBQYXVsIEtvb3R0YWxhIGluYXVndXJhdGVkIHRoZSBvZmZpY2lhbCBsb3VuZ2luZyBvZiB0aGUgSkxHIHByb2dyYW0gaW4gV1NTUy4gQXNzb2NpYXRlIERpcmVjdG9yIFJldi4gRnIuIEppbm9qIFBhbGF0aGFkYXRoaWwgcHJlc2lkZWQgb3ZlciB0aGUgbWVldGluZy4gUHJvZ3JhbSBPZmZpY2VyIFAuIEEuIEpvc2UsIENvLW9yZGluYXRvciBKb2pvIFRob3BwaWwsIGFuZCBUZWNobmljYWwgRXhwZXJ0IEphbmN5IEppam8gc3Bva2UuIEtlcmFsYSBCYW5rIEFncmljdWx0dXJlIE9mZmljZXIgQXNoYSBVbm5pIGxlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjIwMjItMDEtMjUgMTE6MTQ6MTYiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogImZsZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FwOiAiMTBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAianVzdGlmeS1jb250ZW50IjogImNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI0OSUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2NDMxMDkyNTYuamZpZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfYygiaHIiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiBzcGFuLTEyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbC1tZC02IHNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzcXMtYmxvY2stY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIyMHB4IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxc3J0ZS10ZXh0LWNvbG9yLS1kYXJrQWNjZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiR09MREVOIEpVQklMRUUgSE9VU0lORyBQUk9KRUNUIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTWFyIFNlYmFzdGlhbiBLYWxsdXB1cmEsIENoYWlybWFuLCBDYXJpdGFzIEluZGlhIGFuZCBBcmNoYmlzaG9wIG9mIHRoZSBEaW9jZXNlIG9mIFBhdG5hLCBmb3JtYWxseSBpbmF1Z3VyYXRlZCB0aGUgaG91c2luZyBwcm9qZWN0IGpvaW50bHkgaW1wbGVtZW50ZWQgYnkgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IGFuZCBCaW93aW4gQWdybyBSZXNlYXJjaCBvbiB0aGUgb2NjYXNpb24gb2YgdGhlIEdvbGRlbiBKdWJpbGVlIG9mIHRoZSBEaW9jZXNlIG9mIE1hbmFudGhhdmFkeS4gQSB0b3RhbCBvZiA1MiBob3VzZXMgd2lsbCBiZSBjb25zdHJ1Y3RlZCB1bmRlciB0aGUgR29sZGVuIEp1YmlsZWUgSG91c2luZyBTY2hlbWUuIFRoZSBjb25zdHJ1Y3Rpb24gb2YgdGhlIDUwMCBzcSBmdCBob3VzZXMgYXQgYSBjb3N0IG9mIGAwNyBsYWtoIHdpbGwgYmUgY29tcGxldGVkIGJ5IEFwcmlsIDIwMjIuIE1hbmFudGhhdmFkeSBEaW9jZXNlIFZpY2FyIEdlbmVyYWwgTXNnci4gUGF1bCBNdW5kb2xpa2FsIHByZXNpZGVkIG92ZXIgdGhlIGZ1bmN0aW9uLiBDYXJpdGFzIEluZGlhIEV4ZWN1dGl2ZSBEaXJlY3RvciBSZXYuIERyLiBQYXVsIE1vb25qZWxpIGRlbGl2ZXJlZCB0aGUga2V5bm90ZSBhZGRyZXNzLiBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRnIuIFBhdWwgS29vdHRhbGEsIEJpb3dpbiBBZ3JvIFJlc2VhcmNoIE1hbmFnaW5nIERpcmVjdG9yIFJldi4gRnIuIEpvaG4gQ2hvb3JhcHB1emhheWlsLCBBc3NvY2lhdGUgRGlyZWN0b3I7IEZyLiBKaW5vaiBQYWxhdGhhZGF0aGlsLCBQcm9ncmFtIE9mZmljZXIgSm9zZSBQLkEgd2VyZSBtYWRlIHRoZSBmZWxpY2l0YXRpb24uIEFzIHBhcnQgb2YgdGhlIEdvbGRlbiBKdWJpbGVlIG9mIHRoZSBEaW9jZXNlIG9mIE1hbmFudGhhdmFkeSwgd29yayB3YXMgc3RhcnRlZCB0byBidWlsZCBob3VzZXMgZm9yIHBvb3IgZmFtaWxpZXMgZnJvbSBkaWZmZXJlbnQgcGFydHMgb2YgdGhlIERpb2Nlc2UuIE91dCBvZiAyODAgYXBwbGljYXRpb25zIHJlY2VpdmVkIGZyb20gdmFyaW91cyBwYXJpc2hlcyBpbiB0aGUgZGlvY2VzZSwgaG91c2luZyBpcyBiZWluZyBwcm92aWRlZCB0byB0aGUgNTIgbW9zdCBkZXNlcnZpbmcgZmFtaWxpZXMuIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSwgQmlvd2luIEFncm8gUmVzZWFyY2ggQ2VudGVyIGFuZCBTYXZlIGEgRmFtaWx5IFBsYW4gYXJlIGZpbmFuY2lhbGx5IHN1cHBvcnRpbmcgdGhlIGluaXRpYXRpdmUuIFRoZSBmaXJzdCBpbnN0YWxsbWVudCBvZiBScy4gMS41IGxha2ggaGFzIGJlZW4gcmVjZWl2ZWQgYnkgNTAgYmVuZWZpY2lhcmllcy4gT3V0IG9mIHRoaXMsIDIyIGZhbWlsaWVzIGNvbXBsZXRlZCB0aGUgc2Vjb25kIHBoYXNlIGFuZCByZWNlaXZlZCB0aGUgc2Vjb25kIGluc3RhbGxtZW50IG9mIFJzLiAxLjUgbGFraHMuIFRoZSByZXN0IG9mIHRoZSBmYW1pbGllcyBhcmUgc3BlZWRpbmcgdXAgdGhlaXIgaG91c2luZyBhY3Rpdml0aWVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1Y2Nlc3MiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiMjAyMi0wMS0yNSAxMToxMjoxMyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXA6ICIxMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQ5JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93c3NzaW5kaWEuaW4vc3RvcmFnZS9uZXdzL3Bob3RvMTY0MzEwOTEzMy5qZmlmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJociIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIHNwYW4tMTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNxcy1ibG9jay1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIwcHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJUSEUgQUNUSVZJVElFUyBPRiBXQVlBTkFEIFNPQ0lBTCBTRVJWSUNFIFNPQ0lFVFkgQVJFIEVYRU1QTEFSWTogQVJDSEJJU0hPUCBNQVIgU0VCQVNUSUFOIEtBTExVUFVSQSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTWFyIFNlYmFzdGlhbiBLYWxsdXB1cmEsIENoYWlybWFuIG9mIENhcml0YXMgSW5kaWEgYW5kIEFyY2hiaXNob3Agb2YgdGhlIERpb2Nlc2Ugb2YgUGF0bmEsIHNhaWQgdGhhdCB0aGUgYWN0aXZpdGllcyBvZiB0aGUgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5LCB0aGUgb2ZmaWNpYWwgc29jaWFsIGRldmVsb3BtZW50IG1vdmVtZW50IG9mIHRoZSBNYW5hbnRoYXZhZHkgRGlvY2VzZSwgYW5kIGl0cyBhZmZpbGlhdGVzIHN1Y2ggYXMgQmlvd2luIEFncm8gUmVzZWFyY2ggYW5kIFJhZGlvIE1hdHRvbGkgYXJlIGV4ZW1wbGFyeS4gSGUgd2FzIHNwZWFraW5nIGFmdGVyIGluYXVndXJhdGluZyBhIHZvbHVudGVlciBtZWV0IG9yZ2FuaXplZCBieSBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgYXMgcGFydCBvZiB0aGUgQXNha2lyYW5hbSBwcm9qZWN0LiBIZSBzYWlkIHRoYXQgdGhlIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5IGlzIGV4ZW1wbGFyeSBpbiB0aGUgc29jaWFsIHNlcnZpY2UgbW92ZW1lbnQgb2YgdGhlIGNvdW50cnkgaW4gdGhlIGZpZWxkIG9mIG9yZ2FuaWMgZmFybWluZywgdHJpYmFsIGRldmVsb3BtZW50LCBuYXR1cmFsIHJlc291cmNlIG1hbmFnZW1lbnQgYW5kIHBlb3BsZSdzIG9yZ2FuaXphdGlvbi4gTWFuYW50aGF2YWR5IERpb2Nlc2UgVmljYXIgR2VuZXJhbCBNc2dyLiBQYXVsIE11bmRvbGlrYWwgcHJlc2lkZWQgb3ZlciB0aGUgZnVuY3Rpb24uIENhcml0YXMgSW5kaWEgRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRnIuIChEcikgUGF1bCBNb29uamVsaSBkZWxpdmVyZWQgdGhlIGtleW5vdGUgYWRkcmVzcy4gV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IEV4ZWN1dGl2ZSBEaXJlY3RvciBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhLCBCaW93aW4gQWdybyBSZXNlYXJjaCBNYW5hZ2luZyBEaXJlY3RvciBSZXYuIEZyLiBKb2huIENob29yYXBwdXpoYXlpbCwgQXNzb2NpYXRlIERpcmVjdG9yOyBGci4gSmlub2ogUGFsYXRoYWRhdGhpbCwgUHJvZ3JhbSBPZmZpY2VyIEpvc2UgUC5BIHdlcmUgbWFkZSB0aGUgZmVsaWNpdGF0aW9uLiBUaGUgc2VtaW5hciB3YXMgaGVsZCBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHZvbHVudGVlciBtZWV0aW5nIHdhcyBsZWQgYnkgUmV2LkZyLihEcikgQmFidSBDaGFraWF0aC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogInRleHQtc3VjY2VzcyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIyMDIyLTAxLTI1IDExOjEwOjUwIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJmbGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcDogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImp1c3RpZnktY29udGVudCI6ICJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDklIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3dzc3NpbmRpYS5pbi9zdG9yYWdlL25ld3MvcGhvdG8xNjQzMTA5MDQ5LmpmaWYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImhyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgc3Bhbi0xMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2wtbWQtNiBzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3FzLWJsb2NrLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjBweCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkFTSEFLSVJBTkFNIERSRVNTIEJBTksg4oCTIEEgUEhJTEFOVEhST1BJQyBNT1ZFTUVOVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiSGVscGluZyBvdGhlcnMgaW4gdGhlaXIgdGltZSBvZiBuZWVkIGlzIGFuIGV4Y2VsbGVudCB3YXkgdG8gY29ubmVjdCB3aXRoIGNvbW11bml0eSBhbmQgcGVvcGxlLiBUaGlzIGJlYXV0aWZ1bCBhcnQgb2YgVm9sdW50ZWVyaW5nIGlzIGltcG9ydGFudCBiZWNhdXNlIGl0IGVuYWJsZSBpbmRpdmlkdWFscyB0byBoZWxwIG90aGVycyBpbiBhIHNlbGZsZXNzIHdheS4gVm9sdW50ZWVyaW5nIGlzIG9uZSBvZiB0aGUgbW9zdCBjaGFsbGVuZ2luZyBhbmQgcmV3YXJkaW5nIG9wcG9ydHVuaXR5IHRoYXQgb25lIHdpbGwgZXZlciBlbmNvdW50ZXIuIEl0IGdpdmVzIHRoZSBjaGFuY2VzIHRvIGJyaW5nIGEgY2hhbmdlIGluIHRoZSBwZW9wbGUgYXJvdW5kLiBBc2hha2lyYW5hbSBDYW5jZXIgQ2FyZSBDYW1wYWlnbiBoYXMgYmVlbiBwcm92aWRpbmcgbnVtZXJvdXMgY2hhbmdlcyBpbiB0aGUgY29tbXVuaXR5IHRocm91Z2ggdGhlIG1hZ2ljIG9mIHNwaXJpdCBvZiBWb2x1bnRlZXJpc20uIFZvbHVudGVlcmlzbSBpcyBhIHdheSBvZiBnaXZpbmcgYmFjayB0byB0aGUgY29tbXVuaXR5IHdoaWxlIGFsc28gZGV2ZWxvcGluZyBlc3NlbnRpYWwgc29jaWFsIHNraWxscyBhbmQgZ2FpbmluZyB2YWx1YWJsZSBleHBlcmllbmNlcy4gVGhhdOKAmXMgdGhlIHJlYXNvbiBDYXJpdGFzIEluZGlhIGNvbnNpZGVyZWQgVm9sdW50ZWVyaW5nIGFzIG9uZSBvZiBoZXIgc3RyYXRlZ2ljIFBpbGxhci4gQXNoYWtpcmFuYW0gRHJlc3MgQmFuayBpcyBvbmUgb2YgdGhlIHZvbHVudGVlcnMgaW5pdGlhdGl2ZSBieSBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkuIFRoaXMgbW9kZWwgb2YgY2FuY2VyIHBhdGllbnRzIHN1cHBvcnQgcHJvZ3JhbW1lIGhhcyBiZWVuIGZ1bmN0aW9uaW5nIGZvciB0aGUgcGFzdCAyIHllYXJzIGluIHRoZSBNYW5hbnRoYXZhZHkgRGlvY2VzZS4gVGhpcyBpcyBhIGh1bWFuaXRhcmlhbiB2ZW50dXJlIGluIGV4dGVuZGluZyBzdXBwb3J0aXZlIGhhbmRzIHRocm91Z2ggQXNoYWtpcmFuYW0gd29tZW4gVm9sdW50ZWVycy4gVGhpcyBlbmRlYXZvdXIgcHJvdmlkZXMgZHJlc3NlcyBwcmltYXJpbHkgdG8gcG9vciBjYW5jZXIgcGF0aWVudHMgYW5kIG5lZWR5IGNvbW11bml0eSBwZW9wbGUuIFRoZXNlIGRyZXNzZXMgYXJlIGNvbmdyZWdhdGVkIGZyb20gZGlmZmVyZW50IGhvdXNlcyB3aGljaCBhcmUgc2VydmljZWFibGUgYW5kIG5vdCB1c2VhYmxlIGZvciB0aGVtIGFuZCBrZXB0IGluIGEgc2VwYXJhdGUgcm9vbSBpbiBXU1NTLiBBbGwgdGhlIHdvbWVuIHZvbHVudGVlcnMgbWFkZSB0aGlzIGFjdCBhIHJvdXRpbmUgaW4gYSBtb250aGx5IHNjaGVkdWxlLiAxMzAwIEFzaGFraXJhbmFtIFZvbHVudGVlcnMgYXJlIGVuZ2FnZWQgaW4gY2FuY2VyIGNhcmUgYWN0aXZpdGllcyBvZiBXU1NTIHRvIHJlZHVjZSB0aGUgc3ByZWFkIG9mIGNhbmNlciBhbmQgc3VwcG9ydCBjYW5jZXIgcGF0aWVudHMuIFRoZSB0aG91Z2h0IG9mIEFzaGFraXJhbmFtIERyZXNzIEJhbmsgZW1lcmdlZCBieSB0aGUgdm9sdW50ZWVycyBpbiB0aGVpciB2b2x1bnRlZXJpbmcgZmlsZWQgd29yayBieSByZWFsaXppbmcgdGhlIHZlcnkgZmFjdCBtYW55IHBvb3IgcGVvcGxlIGluIHRoZSBjb21tdW5pdHkgbGFjayBwcm9wZXIgY2xvdGhpbmcgZXNwZWNpYWxseSBpbiB0aGUgdHJpYmFsIGJlbHRzLiBUaGUgaWRlYSBvZiBBc2hha2lyYW5hbSBEcmVzcyBiYWNrIHdhcyBhcHByb3ZlZCBieSB0aGUgRFNTUyBEaXJlY3RvciBpbiBvbmUgdGhlIFJlc291cmNlIFRlYW0gbWVldGluZyB0aGF0IGNvbmR1Y3QgZXZlcnkgcXVhcnRlciBmb3IgcGxhbm5pbmcgdGhlIGZ1dHVyZSBhY3Rpdml0aWVzIGZvciB2b2x1bnRlZXJzLiBBIHJvb20gd2FzIHNldCB0byBrZWVwIHRoZSBjbG90aGluZyB0aGUgdm9sdW50ZWVycyBtb2JpbGl6ZWQgZnJvbSB0aGUgY29tbXVuaXR5LiDigJxBc2hha2lyYW5hbSBEcmVzcyBCYW5rIGlzIHRydWx5IGEgbmVlZC1iYXNlZCBpbnRlcnZlbnRpb25zIG9mIFdTU1MgdW5kZXIgQXNoYWtpcmFuYW0gY2FtcGFpZ24gYW5kIHdlIHNlZSBhIGdvb2QgbnVtYmVyIG9mIHBlb3BsZSBjb21lIGFuZCBnZXQgdGhlIGJlbmVmaXQgb2YgdGhlIG5vYmxlIGluaXRpYXRpdmUgYW5kIGl0IGhhcyBiZWNvbWUgb25lIHRoZSBtaWxlc3RvbmUgYWNoaWV2ZW1lbnQgb2YgV1NTU+KAnSBzYXlzIFJldi4gRnIuIFBhdWwgS29vdHRhbGEsIEV4ZWN1dGl2ZSBEaXJlY3RvciwgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5LiBUaGVyZSBpcyBhIGxvZyBib29rIGtlcHQgaW4gdGhlIERyZXNzIGJhbmsgdG8gdW5kZXJzdGFuZCBhbmQgcmVjb3JkIHRoZSB2b2x1bWUgb2Ygc3VwcG9ydCBleHRlbmRpbmcgYnkgdGhpcyBpbml0aWF0aXZlLiBBbnkgbmVlZHkgcGVyc29uIGNhbiBjb21lIGFuZCB0YWtlIHRoZSBjbG90aGluZyBhY2NvcmRpbmcgdG8gdGhlIHJlcXVpcmVtZW50IGFuZCBtZW50aW9uIHRoZSBudW1iZXIgb2YgY2xvdGhpbmcgaW4gdGhlIGxvZ2Jvb2suIEluIHRoZSBzYW1lIG1hbm5lciBpZiBhbnkgcGVyc29uIHdpc2hlcyB0byBjb250cmlidXRlLCB0aGV5IGNhbiBhbHNvIGZyZWVseSBhcHByb2FjaCBhbmQga2VlcCB0aGUgY2xvdGhpbmcgaW4gdGhlIGRyZXNzIGJhbmsgbWFya2luZyBpbiB0aGUgbG9nYm9vay4gVGhlIGxvZ2Jvb2sgc2hvd3MgdGhlIHF1YW50aXR5IG9mIGNsb3RoaW5nIGNvbGxlY3RlZCBmcm9tIHRoZSBjb21tdW5pdHkgYW5kIGRpc3RyaWJ1dGUgYW1vbmcgcG9vciB3aXRoIHRoaXMgY2FtcGFpZ24uIFRoZSB2b2x1bnRlZXJzIHZpc2l0IGFuZCBoYW5kIG92ZXIgdGhlIGRyZXNzIHRvIHNpY2sgY2FuY2VyIHBhdGllbnRzLiDigJxGb3IgdGhlIHBhc3QgMiB5ZWFycyB3aXRoIHRoZSBzdXBwb3J0IG9mIFZvbHVudGVlcnMgdGhvdXNhbmQgb2YgdXNhYmxlIGRyZXNzZXMgd2VyZSBjb2xsZWN0ZWQgYW5kIGRpc3RyaWJ1dGVkLiBFdmVyeSBtb250aCB2b2x1bnRlZXJzIGJyaW5nIGNsb3RocyBmcm9tIHRoZWlyIG9wZXJhdGlvbmFsIGFyZWFzIGFuZCBleHBhbmRpbmcgdGhlc2Ugc2VydmljZXMgdG8gbW9yZSBwb29yIHBlb3BsZeKAnSBzYXlzIFJldi4gRnIuIEppbm9qIFBhbGF0aGFkYXRoaWwsIEFzc29jaWF0ZSBFeC4gRGlyZWN0b3IsIFdTU1MuIFZvbHVudGVlcnMgUGxheSB2aXRhbCByb2xlIGluIG1vYmlsaXppbmcgdGhlIGRyZXNzIGZyb20gdGhlIGNvbW11bml0eS4gVm9sdW50ZWVycyBzaG93IHRoZWlyIGhhcHBpbmVzcyB0byBiZSBlbmdhZ2VkIGluIHRoaXMgY2FyaW5nIHNlcnZpY2UuIOKAnEkgZmVlbCB2ZXJ5IGhhcHB5IGFuZCBqb3kgYnkgZ2V0dGluZyB0aGUgb3Bwb3J0dW5pdHkgdG8gaGVscCB0aG9zZSBpbiBuZWVkLiBUaGUgcGVvcGxlIGFyZSBkb25hdGluZyB3aXRoIHBvc2l0aXZlIGFuZCBoYXBweSBtaW5kLCB0aGlzIGluIGEgd2F5IG1ha2luZyBjaGFuZ2VzIGluIG1lIGFuZCBtb3RpdmF0aW5nIG1lIHRvIGludm9sdmUgbW9yZSBpbiB0aGlzIGFjdOKAnSBzYWlkIGJ5IE1ycyBTaG9iYSBFZGF5b29ya3VubnUgd2hpbGUgaGFuZGluZyBvdmVyIHRoZSBtb2JpbGl6ZWQgY2xvdGhpbmcgdG8gdGhlIERyZXNzIEJhbmsuIER1cmluZyB0aGUgcGFuZGVtaWMgc2Vhc29uLCB0aGUgRHJlc3MgQmFuayBiZWNhbWUgYSBncmVhdCByZWxpZWYgdG8gYSBnb29kIG51bWJlciBvZiBwZW9wbGUgd2hvIGhhdmUgc3RydWdnbGVkIHdpdGggQ292aWQgcmVsYXRlZCB1bmVtcGxveW1lbnQgYW5kIGxvY2tkb3duLiBUaGVzZSBkYXlzLCB0aGUgbm9ibGUgaW5pdGlhdGl2ZSBpcyBhcHByZWNpYXRlZCBieSBtYW55IHBlb3BsZSBhbmQgdGhlIGxlYWRpbmcgTWVkaWFzIGNvdmVyZWQgdGhlIG5ld3MgY29udGVudC4gVGhlcmUgYXJlIGFsc28gbW9yZSBwZW9wbGUgd2hvIGFyZSBraW5kIGVub3VnaCB0byBkb25hdGUgdGhlaXIgc2VydmljZWFibGUgZHJlc3NlcyB0byB0aGUgcG9vciBhbmQgYmVjb21lIHBhcnRha2VycyBpbiB0aGUgY29tcHJlaGVuc2libGUgc2VydmljZSBvZiBXU1NTLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjIwMjItMDEtMjUgMTE6MDg6MjYiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogImZsZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FwOiAiMTBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAianVzdGlmeS1jb250ZW50IjogImNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI0OSUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2NDMxMDg5MDYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJociIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIHNwYW4tMTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNxcy1ibG9jay1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIwcHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJNRURJQ0FMIEtJVCBESVNUUklCVVRJT04uIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTWVkaWNhbCBraXRzIHdlcmUgZGlzdHJpYnV0ZWQgd2l0aCB0aGUgZmluYW5jaWFsIGFzc2lzdGFuY2Ugb2YgQ2FyaXRhcyBJbmRpYSwgS2VyYWxhIENhdGhvbGljIEJpc2hvcHMnIENvdW5jaWwsIFN5cm8tTWFsYWJhciBEaW9jZXNlIE1lbGJvdXJuZSBBdXN0cmFsaWEgYW5kIHRoZSBDYXRob2xpYyBNaXNzaW9uIGFzIHBhcnQgb2YgQ292aWQgcHJldmVudGlvbiBhY3Rpdml0aWVzLiBUaGUgZGlzdHJpYnV0aW9uIHdhcyBpbmF1Z3VyYXRlZCBieSBCaXNob3AgTWFyIEpvc2UgUG9ydW5uZWRvbSwgUmV2LiBGci4gSmFjb2IgTWF2dW5nYWwgKEV4ZWN1dGl2ZSBEaXJlY3RvciwgS2VyYWxhIFNvY2lhbCBTZXJ2aWNlIEZvcnVtKSBEci4gVi5SIEhhcmlkYXMgKE1hbmFnZXIsIENhcml0YXMgSW5kaWEpLCBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhIChFeGVjdXRpdmUgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSkgRnIuIEpvbm9qIFBhbGF0aGFkYXRoaWwgKEFzc29jaWF0ZSBEaXJlY3RvciwgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5KSwgU3IuIEplc2VlbmEgKFRlYW0gTGVhZGVyLCBLU1NGKSwgUC5BLkpvc2UgKFByb2dyYW0gT2ZmaWNlciwgV1NTUykgd2VyZSBzcG9rZS4gVGhlIG1lZGljYWwga2l0IGluY2x1ZGVzIGEgZmluZ2VydGlwIHB1bHNlIG94b21ldGVyLCBtZWRpY2FsIHRoZXJtb21ldGVyLCB2YXBvcml6ZXIsIHNhbml0aXplcnMsIG1hc2tzIGFuZCBoYW5kcyB3YXNoLiBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgaXMgZGlzdHJpYnV0aW5nIG1lZGljYWwga2l0cyB0byAxMDAgcG9vciBmYW1pbGllcy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogInRleHQtc3VjY2VzcyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIyMDIxLTA4LTMwIDA5OjM5OjIzIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJmbGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcDogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImp1c3RpZnktY29udGVudCI6ICJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDklIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3dzc3NpbmRpYS5pbi9zdG9yYWdlL25ld3MvcGhvdG8xNjMwMzE2MzYzLmpmaWYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImhyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgc3Bhbi0xMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2wtbWQtNiBzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3FzLWJsb2NrLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjBweCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlJVQlkgSlVCSUxFRSBPRiBUSEUgS0VSQUxBIFNPQ0lBTCBTRVJWSUNFIEZPUlVNIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJUaGlzIHllYXIgbWFya3MgdGhlIFJ1YnkgSnViaWxlZSBvZiB0aGUgS2VyYWxhIFNvY2lhbCBTZXJ2aWNlIEZvcnVtLCB3aGljaCBzcGVhcmhlYWRzIGNvbW11bml0eSBzZXJ2aWNlIGFjdGl2aXRpZXMgaW4gdGhlIENhdGhvbGljIERpb2Nlc2VzIG9mIEtlcmFsYS4gQXMgcGFydCBvZiB0aGUganViaWxlZSBjZWxlYnJhdGlvbnMsIGl0IHdhcyBkZWNpZGVkIHRvIHBsYW50IGZydWl0IHNhcGxpbmdzIGluIGFsbCB0aGUgMzIgZGlvY2VzZXMgb2YgS2VyYWxhIGFsb25nIHdpdGggdmFyaW91cyBldmVudHMuIEZydWl0IHRyZWUgc2FwbGluZ3MgYXJlIHBsYW50ZWQgd2l0aCB0aGUgYWltIG9mIG1ha2luZyBkaW9jZXNhbiBzb2NpYWwgc2VydmljZSBzb2NpZXRpZXMgZnJ1aXRmdWwgbW92ZW1lbnRzIGluIHRoZSBjb21tdW5pdHkgQmlzaG9wIE1hciBKb3NlIFBvcnVubmVkYW0gaW5hdWd1cmF0ZWQgdGhlIHN0YXRlIGxldmVsIHByb2dyYW0gYnkgcGxhbnRpbmcgYSBzYXBwb3R0YSB0cmVlIGF0IHRoZSBvZmZpY2UgY2FtcHVzIG9mIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSBvbiBDaGluZ2FtIDAxLCB0aGUgZmFybWVy4oCZcyBkYXkuIFJldi4gRnIuIEphY29iIE1hdnVuZ2FsIChFeGVjdXRpdmUgRGlyZWN0b3IsIEtlcmFsYSBTb2NpYWwgU2VydmljZSBGb3J1bSkgRHIuIFYuUiBIYXJpZGFzIChNYW5hZ2VyLCBDYXJpdGFzIEluZGlhKSwgUmV2LiBGci4gUGF1bCBLb290dGFsYSAoRXhlY3V0aXZlIERpcmVjdG9yLCBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkpIEZyLiBKb25vaiBQYWxhdGhhZGF0aGlsIChBc3NvY2lhdGUgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSksIFNyLiBKZXNlZW5hIChUZWFtIExlYWRlciwgS1NTRiksIFAuQS5Kb3NlIChQcm9ncmFtIE9mZmljZXIsIFdTU1MpIHdlcmUgcGFydGljaXBhdGVkIGluIHRoZSBldmVudC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogInRleHQtc3VjY2VzcyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIyMDIxLTA4LTMwIDA5OjM4OjI1IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJmbGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcDogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImp1c3RpZnktY29udGVudCI6ICJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDklIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3dzc3NpbmRpYS5pbi9zdG9yYWdlL25ld3MvcGhvdG8xNjMwMzE2MzA1LmpmaWYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImhyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgc3Bhbi0xMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2wtbWQtNiBzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3FzLWJsb2NrLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjBweCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIktTU0YgUkVHSU9OQUwgV09SS1NIT1AiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBIDAyIGRheSB3b3Jrc2hvcCB3YXMgY29uZHVjdGVkIGZvciB0aGUgRGlyZWN0b3JzIGFuZCBUZWFtIG1lbWJlcnMgb2YgRGlvY2VzYW4gU29jaWFsIFNlcnZpY2UgU29jaWV0aWVzIGluIHRoZSBNYWxhYmFyIHJlZ2lvbiB1bmRlciB0aGUgbGVhZGVyc2hpcCBvZiBLZXJhbGEgU29jaWFsIFNlcnZpY2UgRm9ydW0uIEJpc2hvcCBNYXIgSm9zZSBQb3J1bm5lZG9tLCBEaW9jZXNlIG9mIE1hbmFudGhhdmFkeSBpbmF1Z3VyYXRlZCB0aGUgd29ya3Nob3AuIER1cmluZyB0aGUgaW5hdWd1cmFsIHNwZWVjaCBNYXIgSm9zZSBQb3J1bm5lZG9tIHNhaWQgdGhhdCB0aGUgd29ybGQgaXMgZmFjaW5nIGdyZWF0IGVudmlyb25tZW50YWwgY2hhbGxlbmdlcyB0b2RheSBhbmQgbmF0dXJlIGNvbnNlcnZhdGlvbiBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgZWFjaCBhbmQgZXZlcnkgb25lIG9mIHVzLiBUaGUgQmlzaG9wIGFza2VkIHVzIHRvIGNoYW5nZSBvdXIgd2F5IG9mIGxpZmUgaW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIGJlYXV0eSBvZiB0aGUgZWFydGgsIHRoZSBjb21tb24gaG9tZSBvZiBtYW4sIGJ5IGRlZGljYXRpbmcgb3Vyc2VsdmVzIHRvIGl0LiBLZXJhbGEgU29jaWFsIFNlcnZpY2UgRm9ydW0gRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRnIuIEphY29iIE1hdnVuZ2FsIHByZXNpZGVkIG92ZXIgdGhlIG1lZXRpbmcuIERyLiBWLlIgSGFyaWRhcyAoTWFuYWdlciwgQ2FyaXRhcyBJbmRpYSksIFJldi4gRnIuIFBhdWwgS29vdHRhbGEgKEV4ZWN1dGl2ZSBEaXJlY3RvciwgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5KSBSZXYuIEZyLiBWYXJnaGVzZSBNYXR0YW1hbmEgKEZvcm1lciBFeGVjdXRpdmUgRGlyZWN0b3IgQ2FyaXRhcyBJbmRpYSkgTXIuSmFtZXMgSm9zZSAoRGlyZWN0b3IsIEVxdWF0b3IgR2VvIFB2dC4gTGltaXRlZCksIFNyLiBKZXNlZW5hIChUZWFtIExlYWRlciwgS1NTRikgUmV2LkZyLiBKb25vaiBQYWxhdGhhZGF0aGlsIChBc3NvY2lhdGUgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSkgd2VyZSBtYWRlIGZlbGljaXRhdGlvbi4gRGlyZWN0b3JzIGFuZCBUZWFtIG1lbWJlcnMgb2YgU29jaWFsIFNlcnZpY2UgT3JnYW5pemF0aW9ucyBmcm9tIEtvemhpa29kZSwgVGhhbWFyYXNzZXJ5LCBUaGFsYXNzZXJ5LCBLYW5udXIsIEJhdGhlcnkgYW5kIE1hbmFudGhhdmFkeSB3ZXJlIHBhcnRpY2lwYXRlZCBpbiB0aGUgdHJhaW5pbmcuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1Y2Nlc3MiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiMjAyMS0wOC0zMCAwOTozNzoyMSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXA6ICIxMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQ5JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93c3NzaW5kaWEuaW4vc3RvcmFnZS9uZXdzL3Bob3RvMTYzMDMxNjI0MS5qZmlmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJociIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIHNwYW4tMTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNxcy1ibG9jay1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIwcHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJESVNUUklCVVRJT04gT0YgU0FOSVRJWkVSUyIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkluIGNvbGxhYm9yYXRpb24gUmVsaWFuY2UgRm91bmRhdGlvbiBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgZGlzdHJpYnV0ZWQgc2FuaXRpemVycyB0byBQb2xpY2UsIEhlYWx0aCB3b3JrZXJzIGFuZCBBc2hhIHdvcmtlcnMgYXMgcGFydCBvZiBDb3ZpZCBwcmV2ZW50aW9uIGFjdGl2aXRpZXMuIFRoZSBkaXN0cmlidXRpb24gd2FzIGluYXVndXJhdGVkIGJ5IE1hbmFudGhhdmFkeSBUcmFmZmljIFVuaXQgU3ViLSBJbnNwZWN0b3IgTXIuIEFiZHVsIEtoYWRlci4gV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IEV4ZWN1dGl2ZSBEaXJlY3RvciBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhLiBSZXYuRnIuSmlub2ogUGFsYXRoYWRhdGhpbCBBc3NvY2lhdGUgRGlyZWN0b3IgV1NTUyBhbmQgTXIuIFAuQS5Kb3NlIFByb2dyYW0gT2ZmaWNlciBXU1NTIHdlcmUgbWFkZSB0aGUgZmVsaWNpdGF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1Y2Nlc3MiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiMjAyMS0wNy0yMSAwNTo1MTozNiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXA6ICIxMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQ5JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93c3NzaW5kaWEuaW4vc3RvcmFnZS9uZXdzL3Bob3RvMTYyNjg0NjY5Ni5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImhyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgc3Bhbi0xMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2wtbWQtNiBzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3FzLWJsb2NrLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjBweCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNPVklEIFNFQ09ORCBMSU5FIFRSRUFUTUVOVCBDRU5URVIgQVQgU1QuSk9TRVBIIEhPU1BJVEFMIE1BTkFOVEhBVkFEWSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiV2l0aCB0aGUgZmluYW5jaWFsIGFzc2lzdGFuY2Ugb2YgQ2FyaXRhcyBJbmRpYSwgV1NTUyBzZXR1cCBhIENvdmlkIFNMVEMgYXQgU3QuIEpvc2VwaCBIb3NwaXRhbCBNYW5hdGhhdmFkeS4gVGhlIG9mZmljaWFsIGxhdW5jaGluZyB3YXMgY2FycmllZCBvdXQgYnkgTWFyIEpvc2UgUG9ydW5uZWRvbSwgQmlzaG9wIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5LiBCaXNob3AgaGFuZGVkIG92ZXIgdGhlIGVxdWlwbWVudHMgdG8gUmV2LiBGci4gTWFub2ogS2F2YWxha2FkYW4sIERpcmVjdG9yLCBTdC4gSm9zZXBoIE1pc3Npb24gSG9zcGl0YWwuIE11bHRpIHBhcmEgbW9uaXRvciwgYW50aWdlbiBraXQsIHB1bHNlIG94aW1ldGVyLCBtYXNrcyBhbmQgcHAga2l0cyB3ZXJlIGhhbmRlZCBvdmVyLiBSZXYuRnIuUGF1bCBLb290dGFsYSwgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSwgUmV2LkZyLkppbm9qIFBhbHRhaGRhdGhpbCBBc3NvY2lhdGUgRGlyZWN0b3IgYW5kIFJldi5Gci5Kb21lc2ggVGhla2tpbGFrYXR0aWwgd2VyZSBwYXJ0aWNpcGF0ZWQgaW4gdGhlIHByb2dyYW0uRGlyZWN0b3IgV1NTUyBhbmQgTXIuIFAuQS5Kb3NlIFByb2dyYW0gT2ZmaWNlciBXU1NTIHdlcmUgbWFkZSB0aGUgZmVsaWNpdGF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1Y2Nlc3MiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiMjAyMS0wNy0yMSAwNTo1MDoxNCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXA6ICIxMHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQ5JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93c3NzaW5kaWEuaW4vc3RvcmFnZS9uZXdzL3Bob3RvMTYyNjg0NjYxNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImhyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}