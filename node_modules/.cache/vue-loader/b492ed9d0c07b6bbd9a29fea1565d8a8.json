{"remainingRequest":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/history.vue?vue&type=template&id=cb515c9e&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/history.vue","mtime":1685598904000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}