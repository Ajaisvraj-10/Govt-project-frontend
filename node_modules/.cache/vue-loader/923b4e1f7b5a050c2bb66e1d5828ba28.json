{"remainingRequest":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\src\\views\\app\\pages\\Products.vue?vue&type=style&index=0&id=6f75f237&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\src\\views\\app\\pages\\Products.vue","mtime":1691590383684},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\css-loader\\dist\\cjs.js","mtime":1690630782794},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1690631371246},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\postcss-loader\\src\\index.js","mtime":1690631539045},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1690631271247},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1690631124815},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\NewVuePrjct\\latest\\node_modules\\vue-loader\\lib\\index.js","mtime":1690631371088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8qIEFkZCB5b3VyIGNvbXBvbmVudCBzdHlsZXMgaGVyZSAqLwo="},{"version":3,"sources":["Products.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA","file":"Products.vue","sourceRoot":"src/views/app/pages","sourcesContent":["<template>\r\n    <div>\r\n      <h1>Add Product</h1>\r\n      <form @submit.prevent=\"addProduct\">\r\n        <label for=\"name\">Product Name:</label>\r\n        <input type=\"text\" id=\"name\" v-model=\"productName\" required />\r\n  \r\n        <label for=\"category\">Category:</label>\r\n        <select id=\"category\" v-model=\"selectedCategory\" required>\r\n          <option v-for=\"category in categories\" :key=\"category.id\" :value=\"category.id\">{{ category.name }}</option>\r\n        </select>\r\n  \r\n        <label for=\"type\">Product Type:</label>\r\n        <select id=\"type\" v-model=\"selectedType\" required>\r\n          <option v-for=\"type in productTypes\" :key=\"type.id\" :value=\"type.id\">{{ type.name }}</option>\r\n        </select>\r\n  \r\n        <label for=\"price\">Price:</label>\r\n        <input type=\"number\" id=\"price\" v-model=\"productPrice\" required />\r\n  \r\n        <button type=\"submit\">Add Product</button>\r\n      </form>\r\n      <p v-if=\"successMessage\">{{ successMessage }}</p>\r\n      <p v-if=\"errorMessage\">{{ errorMessage }}</p>\r\n  \r\n      <h2>Added Products</h2>\r\n      <ul>\r\n        <li v-for=\"product in products\" :key=\"product.id\">\r\n          {{ product.name }} - {{ getCategoryName(product.category) }} - {{ getProductTypeName(product.type) }} - ${{ product.price }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        productName: \"\",\r\n        selectedCategory: null,\r\n        selectedType: null,\r\n        productPrice: null,\r\n        categories: [],\r\n        productTypes: [],\r\n        successMessage: \"\",\r\n        errorMessage: \"\",\r\n        products: []\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchCategories();\r\n      this.fetchProductTypes();\r\n      this.fetchProducts();\r\n    },\r\n    methods: {\r\n      async fetchCategories() {\r\n        try {\r\n          const response = await fetch(\"http://127.0.0.1:8000/api/cropscategory/\");\r\n          if (response.ok) {\r\n            this.categories = await response.json();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching categories:\", error);\r\n        }\r\n      },\r\n      async fetchProductTypes() {\r\n        try {\r\n          const response = await fetch(\"http://127.0.0.1:8000/api/cropsproduct_type/\");\r\n          if (response.ok) {\r\n            this.productTypes = await response.json();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching product types:\", error);\r\n        }\r\n      },\r\n      async fetchProducts() {\r\n        try {\r\n          const response = await fetch(\"http://127.0.0.1:8000/api/cropsproduct/\");\r\n          if (response.ok) {\r\n            this.products = await response.json();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching products:\", error);\r\n        }\r\n      },\r\n      async addProduct() {\r\n        try {\r\n          const response = await fetch(\"http://127.0.0.1:8000/api/cropsproduct/\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n              name: this.productName,\r\n              category: this.selectedCategory,\r\n              type: this.selectedType,\r\n              price: this.productPrice\r\n            })\r\n          });\r\n  \r\n          if (response.ok) {\r\n            this.successMessage = \"Product added successfully!\";\r\n            this.productName = \"\";\r\n            this.selectedCategory = null;\r\n            this.selectedType = null;\r\n            this.productPrice = null;\r\n            this.fetchProducts();\r\n          } else {\r\n            this.errorMessage = \"Failed to add product. Please try again.\";\r\n          }\r\n        } catch (error) {\r\n          this.errorMessage = \"An error occurred. Please try again later.\";\r\n        }\r\n      },\r\n      getCategoryName(categoryId) {\r\n        const category = this.categories.find(category => category.id === categoryId);\r\n        return category ? category.name : \"\";\r\n      },\r\n      getProductTypeName(typeId) {\r\n        const type = this.productTypes.find(type => type.id === typeId);\r\n        return type ? type.name : \"\";\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your component styles here */\r\n  </style>\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      productName: \"\",\r\n      selectedCategory: null,\r\n      productPrice: null,\r\n      categories: [],\r\n      successMessage: \"\",\r\n      errorMessage: \"\",\r\n      products: []\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchCategories();\r\n    this.fetchProducts();\r\n  },\r\n  methods: {\r\n    async fetchCategories() {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:8000/api/cropscategory/\");\r\n        if (response.ok) {\r\n          this.categories = await response.json();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching categories:\", error);\r\n      }\r\n    },\r\n    async fetchProducts() {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:8000/api/cropsproduct/\");\r\n        if (response.ok) {\r\n          this.products = await response.json();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching products:\", error);\r\n      }\r\n    },\r\n    async addProduct() {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:8000/api/cropsproduct/\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            name: this.productName,\r\n            category: this.selectedCategory,\r\n            price: this.productPrice\r\n          })\r\n        });\r\n\r\n        if (response.ok) {\r\n          this.successMessage = \"Product added successfully!\";\r\n          this.productName = \"\";\r\n          this.selectedCategory = null;\r\n          this.productPrice = null;\r\n          this.fetchProducts();\r\n        } else {\r\n          this.errorMessage = \"Failed to add product. Please try again.\";\r\n        }\r\n      } catch (error) {\r\n        this.errorMessage = \"An error occurred. Please try again later.\";\r\n      }\r\n    },\r\n    getCategoryName(categoryId) {\r\n      const category = this.categories.find(category => category.id === categoryId);\r\n      return category ? category.name : \"\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}