{"remainingRequest":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/news.vue?vue&type=template&id=62adc652&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/news.vue","mtime":1685602206000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9Im1haW4tY29udGVudCI+CiAgPGRpdiBpZD0icGFnZSIgY2xhc3M9InNpdGUgYXdhcmRzIj4KICAgIDxNYWluSGVhZGVyPjwvTWFpbkhlYWRlcj4KICAgIDxkaXYgaWQ9IiIgIGNsYXNzPSJjb250YWluZXItd3NzIj4KICAgICAgPGFydGljbGUgaWQ9InNlY3Rpb25zIiBjbGFzcz0ic2VjdGlvbnMgIgogICAgICAgIDxzZWN0aW9uICBjbGFzcz0icGFnZS1zZWN0aW9uIGxheW91dC1lbmdpbmUtc2VjdGlvbiBiYWNrZ3JvdW5kLXdpZHRoLS1mdWxsLWJsZWVkIGhvcml6b250YWwtYWxpZ25tZW50LS1jZW50ZXIgdmVydGljYWwtYWxpZ25tZW50LS1ib3R0b20gYmxhY2siIHN0eWxlPSJtaW4taGVpZ2h0OiA4NXZoOyBwYWRkaW5nLXRvcDogMTIwLjE0MXB4OyIgPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1ib3JkZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWJhY2tncm91bmQiPgogICAgICAgICAgICAgIDxkaXYgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLXZpZGVvLWJhY2tncm91bmQtbmF0aXZlIGNvbnRlbnQtZmlsbCIgPgogICAgICAgICAgICAgICAgICA8aW1nICBjbGFzcz0ic3FzLXZpZGVvLWJhY2tncm91bmQtbmF0aXZlX19mYWxsYmFjay1pbWFnZSBzcXMtdmlkZW8tYmFja2dyb3VuZC1uYXRpdmVfX2ZhbGxiYWNrLWltYWdlLS1oaWRkZW4iIHN0eWxlPSJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBvYmplY3QtcG9zaXRpb246IHRvcDsgb2JqZWN0LWZpdDogY292ZXI7IiBzcmM9Ii9pbWFnZS9pbWcyLmpwZyIgPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXdyYXBwZXIiIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiBjYWxjKDc1dm1heCAvIDUpO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0OwogICAgICAgICAgICAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50IiBzdHlsZT0ibWF4LXdpZHRoOiA1MjBweDsiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1sYXlvdXQgc3FzLWdyaWQtMTIgY29sdW1ucy0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgc3FzLXJvdyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBzcXMtY29sLTcgcC0wIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2stY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBzdHlsZT0id2hpdGUtc3BhY2U6cHJlLXdyYXA7Ij48ZW0gc3R5bGU9InBvc2l0b246cmVsYXRpdmU7Ij5OZXdzPC9lbT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InNxc3J0ZS1sYXJnZSIgc3R5bGU9IndoaXRlLXNwYWNlOnByZS13cmFwOyI+QW4gVW5kZXJ0YWtpbmcgb2YgdGhlIENhdGhvbGljIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5LjwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jayBidXR0b24tYmxvY2sgc3FzLWJsb2NrLWJ1dHRvbiIgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiIGlkPSJ5dWlfM18xN18yXzFfMTY3ODY4NDQyOTcxMl8zNTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2stYnV0dG9uLWNvbnRhaW5lciBzcXMtYmxvY2stYnV0dG9uLWNvbnRhaW5lci0tbGVmdCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImNvbnRhY3QiIGNsYXNzPSJzcXMtYmxvY2stYnV0dG9uLWVsZW1lbnQtLW1lZGl1bSBzcXMtYnV0dG9uLWVsZW1lbnQtLXByaW1hcnkgc3FzLWJsb2NrLWJ1dHRvbi1lbGVtZW50IiA+IEZvciBtb3JlIEluZm9ybWF0aW9ucywgQ29udGFjdCBVcyDigLogPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvc2VjdGlvbj4KCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9InBhZ2Utc2VjdGlvbiBsYXlvdXQtZW5naW5lLXNlY3Rpb24gYmFja2dyb3VuZC13aWR0aC0tZnVsbC1ibGVlZCBob3Jpem9udGFsLWFsaWdubWVudC0tY2VudGVyIHZlcnRpY2FsLWFsaWdubWVudC0tbWlkZGxlICB3aGl0ZSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXdyYXBwZXIgY29udGFpbmVyIiBzdHlsZT0icGFkZGluZy10b3A6IGNhbGMoNTB2bWF4IC8gMTApOyBwYWRkaW5nLWJvdHRvbTogY2FsYyg1MHZtYXggLyAxMCk7IiA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1sYXlvdXQgc3FzLWdyaWQtMTIgY29sdW1ucy0xMiIgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHNxcy1yb3ciPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgc3Bhbi0xMiIgPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+IAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT0iZm9udC1zaXplOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiPldTU1MgSVMgRk9STUlORyAyMDAgSk9JTlQgTElBQklMSVRZIEdST1VQUyAoSkxHUyk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5XYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHksIHdpdGggdGhlIGZpbmFuY2lhbCBhc3Npc3RhbmNlIG9mIE5BQkFSRCwgMjAwIEpvaW50IExpYWJpbGl0eSBDb21taXR0ZWVzIChKTEdzKSB3aWxsIGJlIHNldCB1cCBpbiBXYXlhbmFkIERpc3RyaWN0LiBXaXRoIHRoaXMsIGl0IGlzIHBvc3NpYmxlIHRvIHN0YXJ0IDIwMCBncm91cCBsZXZlbCB2ZW50dXJlcy4gSm9pbnQgbGlhYmlsaXR5IGdyb3VwcyBjb25zaXN0IG9mIGZvdXIgdG8gMTAgbWVtYmVycy4gVGhlIHNjaGVtZSBpcyBiZWluZyBpbXBsZW1lbnRlZCB3aXRoIHRoZSBvYmplY3RpdmUgb2YgbGF1bmNoaW5nIHZhcmlvdXMgSUdQcyBvbiBhIGdyb3VwIGJhc2lzLCB0aGVyZWJ5IGVuc3VyaW5nIGEgc3RlYWR5IGluY29tZSBmb3IgdGhlIGZpbmFuY2lhbGx5IGJhY2t3YXJkIGZhbWlsaWVzLiBUaGUgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IHdpbGwgcHJvdmlkZSB0cmFpbmluZyB0byB0aGUgZ3JvdXBzIGludm9sdmVkIGluIHRoZSBzY2hlbWUsIGluY2x1ZGluZyB0aGUgdHJhaW5pbmcgcmVxdWlyZWQgYmVmb3JlIHN0YXJ0aW5nIGVxdWl0eSBncm91cHMsIHRoZSByZXF1aXJlZCByZWNvcmRzIGFuZCB0aGUgcHJvamVjdHMgcmVxdWlyZWQgdG8gb2J0YWluIGEgbG9hbiBmcm9tIHRoZSBiYW5rLiBUaGUgc2NoZW1lIGlzIGJlaW5nIGltcGxlbWVudGVkIGluIGFzc29jaWF0aW9uIHdpdGggS2VyYWxhIEJhbmssIENhbmFyYSBCYW5rIGFuZCBLZXJhbGEgR3JhbWVlbiBCYW5rLiBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRnIuLiBQYXVsIEtvb3R0YWxhIGluYXVndXJhdGVkIHRoZSBvZmZpY2lhbCBsb3VuZ2luZyBvZiB0aGUgSkxHIHByb2dyYW0gaW4gV1NTUy4gQXNzb2NpYXRlIERpcmVjdG9yIFJldi4gRnIuIEppbm9qIFBhbGF0aGFkYXRoaWwgcHJlc2lkZWQgb3ZlciB0aGUgbWVldGluZy4gUHJvZ3JhbSBPZmZpY2VyIFAuIEEuIEpvc2UsIENvLW9yZGluYXRvciBKb2pvIFRob3BwaWwsIGFuZCBUZWNobmljYWwgRXhwZXJ0IEphbmN5IEppam8gc3Bva2UuIEtlcmFsYSBCYW5rIEFncmljdWx0dXJlIE9mZmljZXIgQXNoYSBVbm5pIGxlZDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtc3VjY2VzcyI+MjAyMi0wMS0yNSAxMToxNDoxNjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6ZmxleDtnYXA6MTBweDtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3dzc3NpbmRpYS5pbi9zdG9yYWdlL25ld3MvcGhvdG8xNjQzMTA5MjU2LmpmaWYiIHN0eWxlPSJ3aWR0aDo0OSU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPiAKICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jay1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9ImZvbnQtc2l6ZTogMjBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNxc3J0ZS10ZXh0LWNvbG9yLS1kYXJrQWNjZW50Ij5HT0xERU4gSlVCSUxFRSBIT1VTSU5HIFBST0pFQ1Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5NYXIgU2ViYXN0aWFuIEthbGx1cHVyYSwgQ2hhaXJtYW4sIENhcml0YXMgSW5kaWEgYW5kIEFyY2hiaXNob3Agb2YgdGhlIERpb2Nlc2Ugb2YgUGF0bmEsIGZvcm1hbGx5IGluYXVndXJhdGVkIHRoZSBob3VzaW5nIHByb2plY3Qgam9pbnRseSBpbXBsZW1lbnRlZCBieSBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgYW5kIEJpb3dpbiBBZ3JvIFJlc2VhcmNoIG9uIHRoZSBvY2Nhc2lvbiBvZiB0aGUgR29sZGVuIEp1YmlsZWUgb2YgdGhlIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5LiBBIHRvdGFsIG9mIDUyIGhvdXNlcyB3aWxsIGJlIGNvbnN0cnVjdGVkIHVuZGVyIHRoZSBHb2xkZW4gSnViaWxlZSBIb3VzaW5nIFNjaGVtZS4gVGhlIGNvbnN0cnVjdGlvbiBvZiB0aGUgNTAwIHNxIGZ0IGhvdXNlcyBhdCBhIGNvc3Qgb2YgYDA3IGxha2ggd2lsbCBiZSBjb21wbGV0ZWQgYnkgQXByaWwgMjAyMi4gTWFuYW50aGF2YWR5IERpb2Nlc2UgVmljYXIgR2VuZXJhbCBNc2dyLiBQYXVsIE11bmRvbGlrYWwgcHJlc2lkZWQgb3ZlciB0aGUgZnVuY3Rpb24uIENhcml0YXMgSW5kaWEgRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRHIuIFBhdWwgTW9vbmplbGkgZGVsaXZlcmVkIHRoZSBrZXlub3RlIGFkZHJlc3MuIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSBFeGVjdXRpdmUgRGlyZWN0b3IgUmV2LiBGci4gUGF1bCBLb290dGFsYSwgQmlvd2luIEFncm8gUmVzZWFyY2ggTWFuYWdpbmcgRGlyZWN0b3IgUmV2LiBGci4gSm9obiBDaG9vcmFwcHV6aGF5aWwsIEFzc29jaWF0ZSBEaXJlY3RvcjsgRnIuIEppbm9qIFBhbGF0aGFkYXRoaWwsIFByb2dyYW0gT2ZmaWNlciBKb3NlIFAuQSB3ZXJlIG1hZGUgdGhlIGZlbGljaXRhdGlvbi4gQXMgcGFydCBvZiB0aGUgR29sZGVuIEp1YmlsZWUgb2YgdGhlIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5LCB3b3JrIHdhcyBzdGFydGVkIHRvIGJ1aWxkIGhvdXNlcyBmb3IgcG9vciBmYW1pbGllcyBmcm9tIGRpZmZlcmVudCBwYXJ0cyBvZiB0aGUgRGlvY2VzZS4gT3V0IG9mIDI4MCBhcHBsaWNhdGlvbnMgcmVjZWl2ZWQgZnJvbSB2YXJpb3VzIHBhcmlzaGVzIGluIHRoZSBkaW9jZXNlLCBob3VzaW5nIGlzIGJlaW5nIHByb3ZpZGVkIHRvIHRoZSA1MiBtb3N0IGRlc2VydmluZyBmYW1pbGllcy4gV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5LCBCaW93aW4gQWdybyBSZXNlYXJjaCBDZW50ZXIgYW5kIFNhdmUgYSBGYW1pbHkgUGxhbiBhcmUgZmluYW5jaWFsbHkgc3VwcG9ydGluZyB0aGUgaW5pdGlhdGl2ZS4gVGhlIGZpcnN0IGluc3RhbGxtZW50IG9mIFJzLiAxLjUgbGFraCBoYXMgYmVlbiByZWNlaXZlZCBieSA1MCBiZW5lZmljaWFyaWVzLiBPdXQgb2YgdGhpcywgMjIgZmFtaWxpZXMgY29tcGxldGVkIHRoZSBzZWNvbmQgcGhhc2UgYW5kIHJlY2VpdmVkIHRoZSBzZWNvbmQgaW5zdGFsbG1lbnQgb2YgUnMuIDEuNSBsYWtocy4gVGhlIHJlc3Qgb2YgdGhlIGZhbWlsaWVzIGFyZSBzcGVlZGluZyB1cCB0aGVpciBob3VzaW5nIGFjdGl2aXRpZXM8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1zdWNjZXNzIj4yMDIyLTAxLTI1IDExOjEyOjEzPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4O2dhcDoxMHB4O2p1c3RpZnktY29udGVudDogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2NDMxMDkxMzMuamZpZiIgc3R5bGU9IndpZHRoOjQ5JTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgc3Bhbi0xMiIgPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+IAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT0iZm9udC1zaXplOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiPlRIRSBBQ1RJVklUSUVTIE9GIFdBWUFOQUQgU09DSUFMIFNFUlZJQ0UgU09DSUVUWSBBUkUgRVhFTVBMQVJZOiBBUkNIQklTSE9QIE1BUiBTRUJBU1RJQU4gS0FMTFVQVVJBPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TWFyIFNlYmFzdGlhbiBLYWxsdXB1cmEsIENoYWlybWFuIG9mIENhcml0YXMgSW5kaWEgYW5kIEFyY2hiaXNob3Agb2YgdGhlIERpb2Nlc2Ugb2YgUGF0bmEsIHNhaWQgdGhhdCB0aGUgYWN0aXZpdGllcyBvZiB0aGUgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5LCB0aGUgb2ZmaWNpYWwgc29jaWFsIGRldmVsb3BtZW50IG1vdmVtZW50IG9mIHRoZSBNYW5hbnRoYXZhZHkgRGlvY2VzZSwgYW5kIGl0cyBhZmZpbGlhdGVzIHN1Y2ggYXMgQmlvd2luIEFncm8gUmVzZWFyY2ggYW5kIFJhZGlvIE1hdHRvbGkgYXJlIGV4ZW1wbGFyeS4gSGUgd2FzIHNwZWFraW5nIGFmdGVyIGluYXVndXJhdGluZyBhIHZvbHVudGVlciBtZWV0IG9yZ2FuaXplZCBieSBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgYXMgcGFydCBvZiB0aGUgQXNha2lyYW5hbSBwcm9qZWN0LiBIZSBzYWlkIHRoYXQgdGhlIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5IGlzIGV4ZW1wbGFyeSBpbiB0aGUgc29jaWFsIHNlcnZpY2UgbW92ZW1lbnQgb2YgdGhlIGNvdW50cnkgaW4gdGhlIGZpZWxkIG9mIG9yZ2FuaWMgZmFybWluZywgdHJpYmFsIGRldmVsb3BtZW50LCBuYXR1cmFsIHJlc291cmNlIG1hbmFnZW1lbnQgYW5kIHBlb3BsZSdzIG9yZ2FuaXphdGlvbi4gTWFuYW50aGF2YWR5IERpb2Nlc2UgVmljYXIgR2VuZXJhbCBNc2dyLiBQYXVsIE11bmRvbGlrYWwgcHJlc2lkZWQgb3ZlciB0aGUgZnVuY3Rpb24uIENhcml0YXMgSW5kaWEgRXhlY3V0aXZlIERpcmVjdG9yIFJldi4gRnIuIChEcikgUGF1bCBNb29uamVsaSBkZWxpdmVyZWQgdGhlIGtleW5vdGUgYWRkcmVzcy4gV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IEV4ZWN1dGl2ZSBEaXJlY3RvciBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhLCBCaW93aW4gQWdybyBSZXNlYXJjaCBNYW5hZ2luZyBEaXJlY3RvciBSZXYuIEZyLiBKb2huIENob29yYXBwdXpoYXlpbCwgQXNzb2NpYXRlIERpcmVjdG9yOyBGci4gSmlub2ogUGFsYXRoYWRhdGhpbCwgUHJvZ3JhbSBPZmZpY2VyIEpvc2UgUC5BIHdlcmUgbWFkZSB0aGUgZmVsaWNpdGF0aW9uLiBUaGUgc2VtaW5hciB3YXMgaGVsZCBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHZvbHVudGVlciBtZWV0aW5nIHdhcyBsZWQgYnkgUmV2LkZyLihEcikgQmFidSBDaGFraWF0aC48L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1zdWNjZXNzIj4yMDIyLTAxLTI1IDExOjEwOjUwPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4O2dhcDoxMHB4O2p1c3RpZnktY29udGVudDogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2NDMxMDkwNDkuamZpZiIgc3R5bGU9IndpZHRoOjQ5JTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgc3Bhbi0xMiIgPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+IAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgc3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT0iZm9udC1zaXplOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiPkFTSEFLSVJBTkFNIERSRVNTIEJBTksg4oCTIEEgUEhJTEFOVEhST1BJQyBNT1ZFTUVOVDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkhlbHBpbmcgb3RoZXJzIGluIHRoZWlyIHRpbWUgb2YgbmVlZCBpcyBhbiBleGNlbGxlbnQgd2F5IHRvIGNvbm5lY3Qgd2l0aCBjb21tdW5pdHkgYW5kIHBlb3BsZS4gVGhpcyBiZWF1dGlmdWwgYXJ0IG9mIFZvbHVudGVlcmluZyBpcyBpbXBvcnRhbnQgYmVjYXVzZSBpdCBlbmFibGUgaW5kaXZpZHVhbHMgdG8gaGVscCBvdGhlcnMgaW4gYSBzZWxmbGVzcyB3YXkuIFZvbHVudGVlcmluZyBpcyBvbmUgb2YgdGhlIG1vc3QgY2hhbGxlbmdpbmcgYW5kIHJld2FyZGluZyBvcHBvcnR1bml0eSB0aGF0IG9uZSB3aWxsIGV2ZXIgZW5jb3VudGVyLiBJdCBnaXZlcyB0aGUgY2hhbmNlcyB0byBicmluZyBhIGNoYW5nZSBpbiB0aGUgcGVvcGxlIGFyb3VuZC4gQXNoYWtpcmFuYW0gQ2FuY2VyIENhcmUgQ2FtcGFpZ24gaGFzIGJlZW4gcHJvdmlkaW5nIG51bWVyb3VzIGNoYW5nZXMgaW4gdGhlIGNvbW11bml0eSB0aHJvdWdoIHRoZSBtYWdpYyBvZiBzcGlyaXQgb2YgVm9sdW50ZWVyaXNtLiBWb2x1bnRlZXJpc20gaXMgYSB3YXkgb2YgZ2l2aW5nIGJhY2sgdG8gdGhlIGNvbW11bml0eSB3aGlsZSBhbHNvIGRldmVsb3BpbmcgZXNzZW50aWFsIHNvY2lhbCBza2lsbHMgYW5kIGdhaW5pbmcgdmFsdWFibGUgZXhwZXJpZW5jZXMuIFRoYXTigJlzIHRoZSByZWFzb24gQ2FyaXRhcyBJbmRpYSBjb25zaWRlcmVkIFZvbHVudGVlcmluZyBhcyBvbmUgb2YgaGVyIHN0cmF0ZWdpYyBQaWxsYXIuIEFzaGFraXJhbmFtIERyZXNzIEJhbmsgaXMgb25lIG9mIHRoZSB2b2x1bnRlZXJzIGluaXRpYXRpdmUgYnkgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5LiBUaGlzIG1vZGVsIG9mIGNhbmNlciBwYXRpZW50cyBzdXBwb3J0IHByb2dyYW1tZSBoYXMgYmVlbiBmdW5jdGlvbmluZyBmb3IgdGhlIHBhc3QgMiB5ZWFycyBpbiB0aGUgTWFuYW50aGF2YWR5IERpb2Nlc2UuIFRoaXMgaXMgYSBodW1hbml0YXJpYW4gdmVudHVyZSBpbiBleHRlbmRpbmcgc3VwcG9ydGl2ZSBoYW5kcyB0aHJvdWdoIEFzaGFraXJhbmFtIHdvbWVuIFZvbHVudGVlcnMuIFRoaXMgZW5kZWF2b3VyIHByb3ZpZGVzIGRyZXNzZXMgcHJpbWFyaWx5IHRvIHBvb3IgY2FuY2VyIHBhdGllbnRzIGFuZCBuZWVkeSBjb21tdW5pdHkgcGVvcGxlLiBUaGVzZSBkcmVzc2VzIGFyZSBjb25ncmVnYXRlZCBmcm9tIGRpZmZlcmVudCBob3VzZXMgd2hpY2ggYXJlIHNlcnZpY2VhYmxlIGFuZCBub3QgdXNlYWJsZSBmb3IgdGhlbSBhbmQga2VwdCBpbiBhIHNlcGFyYXRlIHJvb20gaW4gV1NTUy4gQWxsIHRoZSB3b21lbiB2b2x1bnRlZXJzIG1hZGUgdGhpcyBhY3QgYSByb3V0aW5lIGluIGEgbW9udGhseSBzY2hlZHVsZS4gMTMwMCBBc2hha2lyYW5hbSBWb2x1bnRlZXJzIGFyZSBlbmdhZ2VkIGluIGNhbmNlciBjYXJlIGFjdGl2aXRpZXMgb2YgV1NTUyB0byByZWR1Y2UgdGhlIHNwcmVhZCBvZiBjYW5jZXIgYW5kIHN1cHBvcnQgY2FuY2VyIHBhdGllbnRzLiBUaGUgdGhvdWdodCBvZiBBc2hha2lyYW5hbSBEcmVzcyBCYW5rIGVtZXJnZWQgYnkgdGhlIHZvbHVudGVlcnMgaW4gdGhlaXIgdm9sdW50ZWVyaW5nIGZpbGVkIHdvcmsgYnkgcmVhbGl6aW5nIHRoZSB2ZXJ5IGZhY3QgbWFueSBwb29yIHBlb3BsZSBpbiB0aGUgY29tbXVuaXR5IGxhY2sgcHJvcGVyIGNsb3RoaW5nIGVzcGVjaWFsbHkgaW4gdGhlIHRyaWJhbCBiZWx0cy4gVGhlIGlkZWEgb2YgQXNoYWtpcmFuYW0gRHJlc3MgYmFjayB3YXMgYXBwcm92ZWQgYnkgdGhlIERTU1MgRGlyZWN0b3IgaW4gb25lIHRoZSBSZXNvdXJjZSBUZWFtIG1lZXRpbmcgdGhhdCBjb25kdWN0IGV2ZXJ5IHF1YXJ0ZXIgZm9yIHBsYW5uaW5nIHRoZSBmdXR1cmUgYWN0aXZpdGllcyBmb3Igdm9sdW50ZWVycy4gQSByb29tIHdhcyBzZXQgdG8ga2VlcCB0aGUgY2xvdGhpbmcgdGhlIHZvbHVudGVlcnMgbW9iaWxpemVkIGZyb20gdGhlIGNvbW11bml0eS4g4oCcQXNoYWtpcmFuYW0gRHJlc3MgQmFuayBpcyB0cnVseSBhIG5lZWQtYmFzZWQgaW50ZXJ2ZW50aW9ucyBvZiBXU1NTIHVuZGVyIEFzaGFraXJhbmFtIGNhbXBhaWduIGFuZCB3ZSBzZWUgYSBnb29kIG51bWJlciBvZiBwZW9wbGUgY29tZSBhbmQgZ2V0IHRoZSBiZW5lZml0IG9mIHRoZSBub2JsZSBpbml0aWF0aXZlIGFuZCBpdCBoYXMgYmVjb21lIG9uZSB0aGUgbWlsZXN0b25lIGFjaGlldmVtZW50IG9mIFdTU1PigJ0gc2F5cyBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhLCBFeGVjdXRpdmUgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eS4gVGhlcmUgaXMgYSBsb2cgYm9vayBrZXB0IGluIHRoZSBEcmVzcyBiYW5rIHRvIHVuZGVyc3RhbmQgYW5kIHJlY29yZCB0aGUgdm9sdW1lIG9mIHN1cHBvcnQgZXh0ZW5kaW5nIGJ5IHRoaXMgaW5pdGlhdGl2ZS4gQW55IG5lZWR5IHBlcnNvbiBjYW4gY29tZSBhbmQgdGFrZSB0aGUgY2xvdGhpbmcgYWNjb3JkaW5nIHRvIHRoZSByZXF1aXJlbWVudCBhbmQgbWVudGlvbiB0aGUgbnVtYmVyIG9mIGNsb3RoaW5nIGluIHRoZSBsb2dib29rLiBJbiB0aGUgc2FtZSBtYW5uZXIgaWYgYW55IHBlcnNvbiB3aXNoZXMgdG8gY29udHJpYnV0ZSwgdGhleSBjYW4gYWxzbyBmcmVlbHkgYXBwcm9hY2ggYW5kIGtlZXAgdGhlIGNsb3RoaW5nIGluIHRoZSBkcmVzcyBiYW5rIG1hcmtpbmcgaW4gdGhlIGxvZ2Jvb2suIFRoZSBsb2dib29rIHNob3dzIHRoZSBxdWFudGl0eSBvZiBjbG90aGluZyBjb2xsZWN0ZWQgZnJvbSB0aGUgY29tbXVuaXR5IGFuZCBkaXN0cmlidXRlIGFtb25nIHBvb3Igd2l0aCB0aGlzIGNhbXBhaWduLiBUaGUgdm9sdW50ZWVycyB2aXNpdCBhbmQgaGFuZCBvdmVyIHRoZSBkcmVzcyB0byBzaWNrIGNhbmNlciBwYXRpZW50cy4g4oCcRm9yIHRoZSBwYXN0IDIgeWVhcnMgd2l0aCB0aGUgc3VwcG9ydCBvZiBWb2x1bnRlZXJzIHRob3VzYW5kIG9mIHVzYWJsZSBkcmVzc2VzIHdlcmUgY29sbGVjdGVkIGFuZCBkaXN0cmlidXRlZC4gRXZlcnkgbW9udGggdm9sdW50ZWVycyBicmluZyBjbG90aHMgZnJvbSB0aGVpciBvcGVyYXRpb25hbCBhcmVhcyBhbmQgZXhwYW5kaW5nIHRoZXNlIHNlcnZpY2VzIHRvIG1vcmUgcG9vciBwZW9wbGXigJ0gc2F5cyBSZXYuIEZyLiBKaW5vaiBQYWxhdGhhZGF0aGlsLCBBc3NvY2lhdGUgRXguIERpcmVjdG9yLCBXU1NTLiBWb2x1bnRlZXJzIFBsYXkgdml0YWwgcm9sZSBpbiBtb2JpbGl6aW5nIHRoZSBkcmVzcyBmcm9tIHRoZSBjb21tdW5pdHkuIFZvbHVudGVlcnMgc2hvdyB0aGVpciBoYXBwaW5lc3MgdG8gYmUgZW5nYWdlZCBpbiB0aGlzIGNhcmluZyBzZXJ2aWNlLiDigJxJIGZlZWwgdmVyeSBoYXBweSBhbmQgam95IGJ5IGdldHRpbmcgdGhlIG9wcG9ydHVuaXR5IHRvIGhlbHAgdGhvc2UgaW4gbmVlZC4gVGhlIHBlb3BsZSBhcmUgZG9uYXRpbmcgd2l0aCBwb3NpdGl2ZSBhbmQgaGFwcHkgbWluZCwgdGhpcyBpbiBhIHdheSBtYWtpbmcgY2hhbmdlcyBpbiBtZSBhbmQgbW90aXZhdGluZyBtZSB0byBpbnZvbHZlIG1vcmUgaW4gdGhpcyBhY3TigJ0gc2FpZCBieSBNcnMgU2hvYmEgRWRheW9vcmt1bm51IHdoaWxlIGhhbmRpbmcgb3ZlciB0aGUgbW9iaWxpemVkIGNsb3RoaW5nIHRvIHRoZSBEcmVzcyBCYW5rLiBEdXJpbmcgdGhlIHBhbmRlbWljIHNlYXNvbiwgdGhlIERyZXNzIEJhbmsgYmVjYW1lIGEgZ3JlYXQgcmVsaWVmIHRvIGEgZ29vZCBudW1iZXIgb2YgcGVvcGxlIHdobyBoYXZlIHN0cnVnZ2xlZCB3aXRoIENvdmlkIHJlbGF0ZWQgdW5lbXBsb3ltZW50IGFuZCBsb2NrZG93bi4gVGhlc2UgZGF5cywgdGhlIG5vYmxlIGluaXRpYXRpdmUgaXMgYXBwcmVjaWF0ZWQgYnkgbWFueSBwZW9wbGUgYW5kIHRoZSBsZWFkaW5nIE1lZGlhcyBjb3ZlcmVkIHRoZSBuZXdzIGNvbnRlbnQuIFRoZXJlIGFyZSBhbHNvIG1vcmUgcGVvcGxlIHdobyBhcmUga2luZCBlbm91Z2ggdG8gZG9uYXRlIHRoZWlyIHNlcnZpY2VhYmxlIGRyZXNzZXMgdG8gdGhlIHBvb3IgYW5kIGJlY29tZSBwYXJ0YWtlcnMgaW4gdGhlIGNvbXByZWhlbnNpYmxlIHNlcnZpY2Ugb2YgV1NTUy48L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1zdWNjZXNzIj4yMDIyLTAxLTI1IDExOjA4OjI2PC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4O2dhcDoxMHB4O2p1c3RpZnktY29udGVudDogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2NDMxMDg5MDYuanBnIiBzdHlsZT0id2lkdGg6NDklOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBzcGFuLTEyIiA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4gCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2stY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIHN0eWxlPSJmb250LXNpemU6IDIwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCI+TUVESUNBTCBLSVQgRElTVFJJQlVUSU9OLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1lZGljYWwga2l0cyB3ZXJlIGRpc3RyaWJ1dGVkIHdpdGggdGhlIGZpbmFuY2lhbCBhc3Npc3RhbmNlIG9mIENhcml0YXMgSW5kaWEsIEtlcmFsYSBDYXRob2xpYyBCaXNob3BzJyBDb3VuY2lsLCBTeXJvLU1hbGFiYXIgRGlvY2VzZSBNZWxib3VybmUgQXVzdHJhbGlhIGFuZCB0aGUgQ2F0aG9saWMgTWlzc2lvbiBhcyBwYXJ0IG9mIENvdmlkIHByZXZlbnRpb24gYWN0aXZpdGllcy4gVGhlIGRpc3RyaWJ1dGlvbiB3YXMgaW5hdWd1cmF0ZWQgYnkgQmlzaG9wIE1hciBKb3NlIFBvcnVubmVkb20sIFJldi4gRnIuIEphY29iIE1hdnVuZ2FsIChFeGVjdXRpdmUgRGlyZWN0b3IsIEtlcmFsYSBTb2NpYWwgU2VydmljZSBGb3J1bSkgRHIuIFYuUiBIYXJpZGFzIChNYW5hZ2VyLCBDYXJpdGFzIEluZGlhKSwgUmV2LiBGci4gUGF1bCBLb290dGFsYSAoRXhlY3V0aXZlIERpcmVjdG9yLCBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkpIEZyLiBKb25vaiBQYWxhdGhhZGF0aGlsIChBc3NvY2lhdGUgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSksIFNyLiBKZXNlZW5hIChUZWFtIExlYWRlciwgS1NTRiksIFAuQS5Kb3NlIChQcm9ncmFtIE9mZmljZXIsIFdTU1MpIHdlcmUgc3Bva2UuIFRoZSBtZWRpY2FsIGtpdCBpbmNsdWRlcyBhIGZpbmdlcnRpcCBwdWxzZSBveG9tZXRlciwgbWVkaWNhbCB0aGVybW9tZXRlciwgdmFwb3JpemVyLCBzYW5pdGl6ZXJzLCBtYXNrcyBhbmQgaGFuZHMgd2FzaC4gV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IGlzIGRpc3RyaWJ1dGluZyBtZWRpY2FsIGtpdHMgdG8gMTAwIHBvb3IgZmFtaWxpZXMuPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtc3VjY2VzcyI+MjAyMS0wOC0zMCAwOTozOToyMzwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6ZmxleDtnYXA6MTBweDtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3dzc3NpbmRpYS5pbi9zdG9yYWdlL25ld3MvcGhvdG8xNjMwMzE2MzYzLmpmaWYiIHN0eWxlPSJ3aWR0aDo0OSU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPiAKICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jay1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9ImZvbnQtc2l6ZTogMjBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNxc3J0ZS10ZXh0LWNvbG9yLS1kYXJrQWNjZW50Ij5SVUJZIEpVQklMRUUgT0YgVEhFIEtFUkFMQSBTT0NJQUwgU0VSVklDRSBGT1JVTTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRoaXMgeWVhciBtYXJrcyB0aGUgUnVieSBKdWJpbGVlIG9mIHRoZSBLZXJhbGEgU29jaWFsIFNlcnZpY2UgRm9ydW0sIHdoaWNoIHNwZWFyaGVhZHMgY29tbXVuaXR5IHNlcnZpY2UgYWN0aXZpdGllcyBpbiB0aGUgQ2F0aG9saWMgRGlvY2VzZXMgb2YgS2VyYWxhLiBBcyBwYXJ0IG9mIHRoZSBqdWJpbGVlIGNlbGVicmF0aW9ucywgaXQgd2FzIGRlY2lkZWQgdG8gcGxhbnQgZnJ1aXQgc2FwbGluZ3MgaW4gYWxsIHRoZSAzMiBkaW9jZXNlcyBvZiBLZXJhbGEgYWxvbmcgd2l0aCB2YXJpb3VzIGV2ZW50cy4gRnJ1aXQgdHJlZSBzYXBsaW5ncyBhcmUgcGxhbnRlZCB3aXRoIHRoZSBhaW0gb2YgbWFraW5nIGRpb2Nlc2FuIHNvY2lhbCBzZXJ2aWNlIHNvY2lldGllcyBmcnVpdGZ1bCBtb3ZlbWVudHMgaW4gdGhlIGNvbW11bml0eSBCaXNob3AgTWFyIEpvc2UgUG9ydW5uZWRhbSBpbmF1Z3VyYXRlZCB0aGUgc3RhdGUgbGV2ZWwgcHJvZ3JhbSBieSBwbGFudGluZyBhIHNhcHBvdHRhIHRyZWUgYXQgdGhlIG9mZmljZSBjYW1wdXMgb2YgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IG9uIENoaW5nYW0gMDEsIHRoZSBmYXJtZXLigJlzIGRheS4gUmV2LiBGci4gSmFjb2IgTWF2dW5nYWwgKEV4ZWN1dGl2ZSBEaXJlY3RvciwgS2VyYWxhIFNvY2lhbCBTZXJ2aWNlIEZvcnVtKSBEci4gVi5SIEhhcmlkYXMgKE1hbmFnZXIsIENhcml0YXMgSW5kaWEpLCBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhIChFeGVjdXRpdmUgRGlyZWN0b3IsIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eSkgRnIuIEpvbm9qIFBhbGF0aGFkYXRoaWwgKEFzc29jaWF0ZSBEaXJlY3RvciwgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5KSwgU3IuIEplc2VlbmEgKFRlYW0gTGVhZGVyLCBLU1NGKSwgUC5BLkpvc2UgKFByb2dyYW0gT2ZmaWNlciwgV1NTUykgd2VyZSBwYXJ0aWNpcGF0ZWQgaW4gdGhlIGV2ZW50LjwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjIwMjEtMDgtMzAgMDk6Mzg6MjU8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmZsZXg7Z2FwOjEwcHg7anVzdGlmeS1jb250ZW50OiBjZW50ZXI7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93c3NzaW5kaWEuaW4vc3RvcmFnZS9uZXdzL3Bob3RvMTYzMDMxNjMwNS5qZmlmIiBzdHlsZT0id2lkdGg6NDklOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBzcGFuLTEyIiA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4gCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2stY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIHN0eWxlPSJmb250LXNpemU6IDIwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCI+S1NTRiBSRUdJT05BTCBXT1JLU0hPUDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkEgMDIgZGF5IHdvcmtzaG9wIHdhcyBjb25kdWN0ZWQgZm9yIHRoZSBEaXJlY3RvcnMgYW5kIFRlYW0gbWVtYmVycyBvZiBEaW9jZXNhbiBTb2NpYWwgU2VydmljZSBTb2NpZXRpZXMgaW4gdGhlIE1hbGFiYXIgcmVnaW9uIHVuZGVyIHRoZSBsZWFkZXJzaGlwIG9mIEtlcmFsYSBTb2NpYWwgU2VydmljZSBGb3J1bS4gQmlzaG9wIE1hciBKb3NlIFBvcnVubmVkb20sIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5IGluYXVndXJhdGVkIHRoZSB3b3Jrc2hvcC4gRHVyaW5nIHRoZSBpbmF1Z3VyYWwgc3BlZWNoIE1hciBKb3NlIFBvcnVubmVkb20gc2FpZCB0aGF0IHRoZSB3b3JsZCBpcyBmYWNpbmcgZ3JlYXQgZW52aXJvbm1lbnRhbCBjaGFsbGVuZ2VzIHRvZGF5IGFuZCBuYXR1cmUgY29uc2VydmF0aW9uIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiBlYWNoIGFuZCBldmVyeSBvbmUgb2YgdXMuIFRoZSBCaXNob3AgYXNrZWQgdXMgdG8gY2hhbmdlIG91ciB3YXkgb2YgbGlmZSBpbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgYmVhdXR5IG9mIHRoZSBlYXJ0aCwgdGhlIGNvbW1vbiBob21lIG9mIG1hbiwgYnkgZGVkaWNhdGluZyBvdXJzZWx2ZXMgdG8gaXQuIEtlcmFsYSBTb2NpYWwgU2VydmljZSBGb3J1bSBFeGVjdXRpdmUgRGlyZWN0b3IgUmV2LiBGci4gSmFjb2IgTWF2dW5nYWwgcHJlc2lkZWQgb3ZlciB0aGUgbWVldGluZy4gRHIuIFYuUiBIYXJpZGFzIChNYW5hZ2VyLCBDYXJpdGFzIEluZGlhKSwgUmV2LiBGci4gUGF1bCBLb290dGFsYSAoRXhlY3V0aXZlIERpcmVjdG9yLCBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkpIFJldi4gRnIuIFZhcmdoZXNlIE1hdHRhbWFuYSAoRm9ybWVyIEV4ZWN1dGl2ZSBEaXJlY3RvciBDYXJpdGFzIEluZGlhKSBNci5KYW1lcyBKb3NlIChEaXJlY3RvciwgRXF1YXRvciBHZW8gUHZ0LiBMaW1pdGVkKSwgU3IuIEplc2VlbmEgKFRlYW0gTGVhZGVyLCBLU1NGKSBSZXYuRnIuIEpvbm9qIFBhbGF0aGFkYXRoaWwgKEFzc29jaWF0ZSBEaXJlY3RvciwgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5KSB3ZXJlIG1hZGUgZmVsaWNpdGF0aW9uLiBEaXJlY3RvcnMgYW5kIFRlYW0gbWVtYmVycyBvZiBTb2NpYWwgU2VydmljZSBPcmdhbml6YXRpb25zIGZyb20gS296aGlrb2RlLCBUaGFtYXJhc3NlcnksIFRoYWxhc3NlcnksIEthbm51ciwgQmF0aGVyeSBhbmQgTWFuYW50aGF2YWR5IHdlcmUgcGFydGljaXBhdGVkIGluIHRoZSB0cmFpbmluZy48L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1zdWNjZXNzIj4yMDIxLTA4LTMwIDA5OjM3OjIxPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4O2dhcDoxMHB4O2p1c3RpZnktY29udGVudDogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2MzAzMTYyNDEuamZpZiIgc3R5bGU9IndpZHRoOjQ5JTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPiAKICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jay1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9ImZvbnQtc2l6ZTogMjBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNxc3J0ZS10ZXh0LWNvbG9yLS1kYXJrQWNjZW50Ij5ESVNUUklCVVRJT04gT0YgU0FOSVRJWkVSUzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkluIGNvbGxhYm9yYXRpb24gUmVsaWFuY2UgRm91bmRhdGlvbiBXYXlhbmFkIFNvY2lhbCBTZXJ2aWNlIFNvY2lldHkgZGlzdHJpYnV0ZWQgc2FuaXRpemVycyB0byBQb2xpY2UsIEhlYWx0aCB3b3JrZXJzIGFuZCBBc2hhIHdvcmtlcnMgYXMgcGFydCBvZiBDb3ZpZCBwcmV2ZW50aW9uIGFjdGl2aXRpZXMuIFRoZSBkaXN0cmlidXRpb24gd2FzIGluYXVndXJhdGVkIGJ5IE1hbmFudGhhdmFkeSBUcmFmZmljIFVuaXQgU3ViLSBJbnNwZWN0b3IgTXIuIEFiZHVsIEtoYWRlci4gV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IEV4ZWN1dGl2ZSBEaXJlY3RvciBSZXYuIEZyLiBQYXVsIEtvb3R0YWxhLiBSZXYuRnIuSmlub2ogUGFsYXRoYWRhdGhpbCBBc3NvY2lhdGUgRGlyZWN0b3IgV1NTUyBhbmQgTXIuIFAuQS5Kb3NlIFByb2dyYW0gT2ZmaWNlciBXU1NTIHdlcmUgbWFkZSB0aGUgZmVsaWNpdGF0aW9uPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtc3VjY2VzcyI+MjAyMS0wNy0yMSAwNTo1MTozNjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6ZmxleDtnYXA6MTBweDtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3dzc3NpbmRpYS5pbi9zdG9yYWdlL25ld3MvcGhvdG8xNjI2ODQ2Njk2LmpwZyIgc3R5bGU9IndpZHRoOjQ5JTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPiAKICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jay1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9ImZvbnQtc2l6ZTogMjBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNxc3J0ZS10ZXh0LWNvbG9yLS1kYXJrQWNjZW50Ij5DT1ZJRCBTRUNPTkQgTElORSBUUkVBVE1FTlQgQ0VOVEVSIEFUIFNULkpPU0VQSCBIT1NQSVRBTCBNQU5BTlRIQVZBRFk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5XaXRoIHRoZSBmaW5hbmNpYWwgYXNzaXN0YW5jZSBvZiBDYXJpdGFzIEluZGlhLCBXU1NTIHNldHVwIGEgQ292aWQgU0xUQyBhdCBTdC4gSm9zZXBoIEhvc3BpdGFsIE1hbmF0aGF2YWR5LiBUaGUgb2ZmaWNpYWwgbGF1bmNoaW5nIHdhcyBjYXJyaWVkIG91dCBieSBNYXIgSm9zZSBQb3J1bm5lZG9tLCBCaXNob3AgRGlvY2VzZSBvZiBNYW5hbnRoYXZhZHkuIEJpc2hvcCBoYW5kZWQgb3ZlciB0aGUgZXF1aXBtZW50cyB0byBSZXYuIEZyLiBNYW5vaiBLYXZhbGFrYWRhbiwgRGlyZWN0b3IsIFN0LiBKb3NlcGggTWlzc2lvbiBIb3NwaXRhbC4gTXVsdGkgcGFyYSBtb25pdG9yLCBhbnRpZ2VuIGtpdCwgcHVsc2Ugb3hpbWV0ZXIsIG1hc2tzIGFuZCBwcCBraXRzIHdlcmUgaGFuZGVkIG92ZXIuIFJldi5Gci5QYXVsIEtvb3R0YWxhLCBEaXJlY3RvciwgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5LCBSZXYuRnIuSmlub2ogUGFsdGFoZGF0aGlsIEFzc29jaWF0ZSBEaXJlY3RvciBhbmQgUmV2LkZyLkpvbWVzaCBUaGVra2lsYWthdHRpbCB3ZXJlIHBhcnRpY2lwYXRlZCBpbiB0aGUgcHJvZ3JhbS5EaXJlY3RvciBXU1NTIGFuZCBNci4gUC5BLkpvc2UgUHJvZ3JhbSBPZmZpY2VyIFdTU1Mgd2VyZSBtYWRlIHRoZSBmZWxpY2l0YXRpb248L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1zdWNjZXNzIj4yMDIxLTA3LTIxIDA1OjUwOjE0PC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4O2dhcDoxMHB4O2p1c3RpZnktY29udGVudDogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3Nzc2luZGlhLmluL3N0b3JhZ2UvbmV3cy9waG90bzE2MjY4NDY2MTQuanBnIiBzdHlsZT0id2lkdGg6NDklOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9zZWN0aW9uPgoKCiAgICAgICAKCiAgICAgIDwvYXJ0aWNsZT4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8TWFpbkZvb3Rlcj48L01haW5Gb290ZXI+CjwvZGl2Pgo="},null]}