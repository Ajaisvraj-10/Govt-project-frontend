{"remainingRequest":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/initiatives.vue?vue&type=template&id=0bbe0678&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/wsss/src/views/app/pages/initiatives.vue","mtime":1685619890000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/wsss/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9Im1haW4tY29udGVudCI+CiAgPGRpdiBpZD0icGFnZSIgY2xhc3M9InNpdGUgYXdhcmRzIj4KICAgIDxNYWluSGVhZGVyPjwvTWFpbkhlYWRlcj4KICAgIDxkaXYgaWQ9IiIgIGNsYXNzPSJjb250YWluZXItd3NzIj4KICAgICAgPGFydGljbGUgaWQ9InNlY3Rpb25zIiBjbGFzcz0ic2VjdGlvbnMgIgogICAgICAgIDxzZWN0aW9uICBjbGFzcz0icGFnZS1zZWN0aW9uIGxheW91dC1lbmdpbmUtc2VjdGlvbiBiYWNrZ3JvdW5kLXdpZHRoLS1mdWxsLWJsZWVkIGhvcml6b250YWwtYWxpZ25tZW50LS1jZW50ZXIgdmVydGljYWwtYWxpZ25tZW50LS1ib3R0b20gYmxhY2siIHN0eWxlPSJtaW4taGVpZ2h0OiA4NXZoOyBwYWRkaW5nLXRvcDogMTIwLjE0MXB4OyIgPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1ib3JkZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWJhY2tncm91bmQiPgogICAgICAgICAgICAgIDxkaXYgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLXZpZGVvLWJhY2tncm91bmQtbmF0aXZlIGNvbnRlbnQtZmlsbCIgPgogICAgICAgICAgICAgICAgICA8aW1nICBjbGFzcz0ic3FzLXZpZGVvLWJhY2tncm91bmQtbmF0aXZlX19mYWxsYmFjay1pbWFnZSBzcXMtdmlkZW8tYmFja2dyb3VuZC1uYXRpdmVfX2ZhbGxiYWNrLWltYWdlLS1oaWRkZW4iIHN0eWxlPSJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBvYmplY3QtcG9zaXRpb246IHRvcDsgb2JqZWN0LWZpdDogY292ZXI7IiBzcmM9Ii9pbWFnZS9pbWcyLmpwZyIgPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXdyYXBwZXIiIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiBjYWxjKDc1dm1heCAvIDUpO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0OwogICAgICAgICAgICAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50IiBzdHlsZT0ibWF4LXdpZHRoOiA1MjBweDsiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1sYXlvdXQgc3FzLWdyaWQtMTIgY29sdW1ucy0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgc3FzLXJvdyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBzcXMtY29sLTcgcC0wIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2stY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBzdHlsZT0id2hpdGUtc3BhY2U6cHJlLXdyYXA7Ij48ZW0gc3R5bGU9InBvc2l0b246cmVsYXRpdmU7Ij5Jbml0aWF0aXZlczwvZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzcXNydGUtbGFyZ2UiIHN0eWxlPSJ3aGl0ZS1zcGFjZTpwcmUtd3JhcDsiPkFuIFVuZGVydGFraW5nIG9mIHRoZSBDYXRob2xpYyBEaW9jZXNlIG9mIE1hbmFudGhhdmFkeS48L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgYnV0dG9uLWJsb2NrIHNxcy1ibG9jay1idXR0b24iID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jay1jb250ZW50IiBpZD0ieXVpXzNfMTdfMl8xXzE2Nzg2ODQ0Mjk3MTJfMzU0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWJ1dHRvbi1jb250YWluZXIgc3FzLWJsb2NrLWJ1dHRvbi1jb250YWluZXItLWxlZnQiID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJjb250YWN0IiBjbGFzcz0ic3FzLWJsb2NrLWJ1dHRvbi1lbGVtZW50LS1tZWRpdW0gc3FzLWJ1dHRvbi1lbGVtZW50LS1wcmltYXJ5IHNxcy1ibG9jay1idXR0b24tZWxlbWVudCIgPiBGb3IgbW9yZSBJbmZvcm1hdGlvbnMsIENvbnRhY3QgVXMg4oC6IDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3NlY3Rpb24+CgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJwYWdlLXNlY3Rpb24gbGF5b3V0LWVuZ2luZS1zZWN0aW9uIGJhY2tncm91bmQtd2lkdGgtLWZ1bGwtYmxlZWQgaG9yaXpvbnRhbC1hbGlnbm1lbnQtLWNlbnRlciB2ZXJ0aWNhbC1hbGlnbm1lbnQtLW1pZGRsZSAgd2hpdGUiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC13cmFwcGVyIGNvbnRhaW5lciIgc3R5bGU9InBhZGRpbmctdG9wOiBjYWxjKDUwdm1heCAvIDEwKTsgcGFkZGluZy1ib3R0b206IGNhbGMoNTB2bWF4IC8gMTApOyIgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtbGF5b3V0IHNxcy1ncmlkLTEyIGNvbHVtbnMtMTIiID4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBzcXMtcm93Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOnByZS13cmFwO2ZvbnQtc2l6ZTogMzBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCI+Qm95cyBUb3duPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6cHJlLXdyYXA7Zm9udC1zaXplOjE0cHg7IiBjbGFzcz0ic3FzcnRlLWxhcmdlIj5UaGUgZnVsbCBmbGVkZ2VkIHRyYWluaW5nIGNlbnRyZSBpcyBtZWFudCBmb3IgdGhlIGNhcGFjaXR5IGJ1aWxkaW5nIG9mIENvbW11bml0eSBEZXZlbG9wbWVudCBPcmdhbml6ZXJzLCBNZW1iZXJzIG9mIHRoZSBTb2NpYWwgV2VsZmFyZSBTb2NpZXRpZXMgKFNXUyksIFNlbGYgSGVscCBHcm91cCAoU0hHKSBtZW1iZXJzLCBzdGFmZiBvZiBXU1NTLCBGYXJtZXJzLCBUcmliYWwgY29tbXVuaXR5LCBDaGlsZHJlbiwgUFJJIG9mZmljaWFscyBhbmQgb3RoZXIgcHVibGljIGZvciBkaWZmZXJlbnQgZGV2ZWxvcG1lbnRhbCBpbnRlcnZlbnRpb25zLiBUaGlzIGNlbnRyZSBpcyBhbHNvIGEgcGxhdGZvcm0gZm9yIHRoZSBOR08tR292dCBuZXR3b3JrLiBBYm92ZSBhbGwgdGhpcyBjZW50cmUgaXMgcGxhbm5lZCB0byBiZSBkZXZlbG9wZWQgYXMgYSByZXNlYXJjaCBjZW50cmUgZm9yIGNvbmR1Y3Rpbmcgc29jaWFsIHJlc2VhcmNoZXMuIEN1cnJlbnRseSBERFUgR0tZIHJlc2lkZW50aWFsIGNvdXJzZSBpcyBjb25kdWN0aW5nIGluIEJveXMgVG93bi4gTWVkaWNpbmFsIHBsYW50cyBnYXJkZW4sIGJvdGFuaWNhbCBtdXNldW0sIHRyYWRpdGlvbmFsIHBlcHBlciBjb25zZXJ2YXRpb24gcGFyaywgcG91bHRyeSBmYXJtLCBwaWcgZmFybSBldGMuIGFyZSBhbHNvIGxvY2F0ZWQgaW4gQm95cyBUb3duLjwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jayBob3Jpem9udGFscnVsZS1ibG9jayBzcXMtYmxvY2staG9yaXpvbnRhbHJ1bGUiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBzcGFuLTEyIiA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGh0bWwtYmxvY2sgc3FzLWJsb2NrLWh0bWwiID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jay1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtmb250LXNpemU6IDMwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3FzcnRlLXRleHQtY29sb3ItLWRhcmtBY2NlbnQiPkNvbW11bml0eSBSYWRpbyBNYXR0b2xpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6cHJlLXdyYXA7Zm9udC1zaXplOjE0cHg7IiBjbGFzcz0ic3FzcnRlLWxhcmdlIj5SYWRpbyBNYXR0b2xpICg5MC40IEZNKSBpcyBhIENvbW11bml0eSBSYWRpbyBTZXJ2aWNlIChDUlMpIGxpY2Vuc2VkIGJ5IHRoZSBVbmlvbiBNaW5pc3RyeSBvZiBJbmZvcm1hdGlvbiAmIEJyb2FkY2FzdGluZywgTmV3IERlbGhpOyBhbmQgc2l0dWF0ZWQgYXQgRHdhcmFrYSAoTWFuYW50aGF2YWR5KSBpbiBXYXlhbmFkIERpc3RyaWN0IG9mIEtlcmFsYSBTdGF0ZS4gUmFkaW8gTWF0dG9saSBpcyB0aGUgaW5mb3JtYXRpb24gY29tbXVuaWNhdGlvbiB0ZWNobm9sb2d5IHBsYXRmb3JtIG9mIFdheWFuYWQgU29jaWFsIFNlcnZpY2UgU29jaWV0eS4gQ29tbXVuaXR5IFJhZGlvIFNlcnZpY2UgZm9jdXNlcyBvbiBkaWZmZXJlbnQgY29tbXVuaXRpZXMgbGl2aW5nIHdpdGhpbiBpdHMgdHJhbnNtaXNzaW9uIHpvbmUuIENSUyByZWFjaGVzIG91dCB0byBldmVyeSBzZWN0aW9uIG9mIHRoZSBzb2NpZXR5IHdpdGggc3BlY2lhbCBhdHRlbnRpb24gdG8gdGhlIGNvbW11bml0aWVzIHRoYXQgYXJlIG1hcmdpbmFsaXplZCwgdG8gZW5zdXJlIHRoYXQgdGhleSBhbHNvIGZpbmQgZXhwcmVzc2lvbiB0aHJvdWdoIHRoZSByYWRpby4gSXQgcHJvdmlkZXMgZmFybWVycywgdHJpYmVzLCBkYWxpdHMsIHdvbWVuIGFuZCBjaGlsZHJlbiBhbiBvcHBvcnR1bml0eSB0byBzcGVhayBvdXQsIGFuZCBiZSBoZWFyZC4gPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOnByZS13cmFwO2ZvbnQtc2l6ZTogMzBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCI+Qmlvd2luIEFncm8gUmVzZWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtmb250LXNpemU6MTRweDsiIGNsYXNzPSJzcXNydGUtbGFyZ2UiPkJpb3dpbiBBZ3JvIFJlc2VhcmNoIGlzIGEgTm9uLVByb2ZpdGFibGUgY29tcGFueSBlc3RhYmxpc2hlZCB1bmRlciBTZWN0aW9uIDggKHByZXZpb3VzbHkgU24uIDI1Qykgb2YgdGhlIENvbXBhbmllcyBBY3QsIDE5NTYgd2l0aCBhbiBpbnRlbnRpb24gdG8gdGFrZSBvdmVyIGFuZCB1cGdyYWRlIHRoZSBPcmdhbmljIENlcnRpZmljYXRpb24gcHJvZ3JhbW1lIGFuZCBhbGxpZWQgYWdyaWN1bHR1cmFsIGFjdGl2aXRpZXMgb2YgV2F5YW5hZCBTb2NpYWwgU2VydmljZSBTb2NpZXR5IChXU1NTKSwgd2l0aCB0aGUgbW90dG8gb2Ygc3VzdGFpbmFibGUgZGV2ZWxvcG1lbnQgYW5kIGVuc3VyZSB0aGUgcmlnaHRmdWwgc2hhcmUgb2YgdGhlIHNtYWxsIHNjYWxlIGZhcm1lcnMgYnkgcmVzcG9uc2libGUgbWFya2V0aW5nIG9mIG9yZ2FuaWNhbGx5IGdyb3duIEluZGlhbiBDb2ZmZWUsIFNwaWNlcyBhbmQgRnJ1aXRzIGNvbGxlY3RpbmcgZnJvbSB0aGUgbWlzdHkgaGlzdG9yaWMgaGlsbCBmb2xkcyBvZiBXYXlhbmFkIC0gbGFuZCBvZiBwbGFudGF0aW9ucyBhbmQgc3BpY2VzLiBCaW93aW4gQWdybyBSZXNlYXJjaCBpcyBhbiBpbml0aWF0aXZlIG9mIHRoZSBDYXRob2xpYyBEaW9jZXNlIG9mIE1hbmFuYW50aGF2YWR5IHRvIHN1cHBvcnQgYW5kIGZhY2lsaXRhdGUgaXRzIHNtYWxsIHNjYWxlIGZhcm1lcnMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOnByZS13cmFwO2ZvbnQtc2l6ZTogMzBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCI+V09GRkE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtmb250LXNpemU6MTRweDsiIGNsYXNzPSJzcXNydGUtbGFyZ2UiPldvZmZhIGlzIGEgZmFybWVycyBwcm9kdWNlciBvcmdhbmlzYXRpb24gZXN0YWJsaXNoZWQgaW4gdGhlIHllYXIgMjAwOCB3aXRoIDQwMCBmYXJtZXJzLiBUaGVyZSBhcmUgY3VycmVudGx5IDEwMDAwIG1lbWJlciBmYXJtZXJzIGRlZGljYXRlZCB0byB0aGUgdmFsdWVzIG9mIGZhaXJ0cmFkZSBhbmQgb3JnYW5pYyBjdWx0aXZhdGlvbi4gVGhlIG1haW4gb2JqZWN0aXZlIG9mIFdvZmZhIGlzIHRvIGVuc3VyZSB0aGUgcmlnaHRmdWxsIG1hcmtldCBzaGFyZSBvZiBpdHMgbWVtYmVyIGZhcm1lcnMgZm9yIHRoZWlyIHByb2R1Y2VzIHRocm91Z2ggZmFpcnRyYWRlIHN5c3RlbSB3aXRob3V0IHRhbXBlcmluZyB0aGUgaW50ZXJlc3Qgb2YgdGhlIGJ1eWVycy4gVGh1cyB3ZSBhcmUgZ3Jvd2luZyBwcm9kdWN0cyB3aGljaCBhcmUgZW52aXJvbm1lbnRhbGx5IHNhZmUgYW5kIHNvY2lhbGx5IGVxdWl0YWJsZS4gPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrIGhvcml6b250YWxydWxlLWJsb2NrIHNxcy1ibG9jay1ob3Jpem9udGFscnVsZSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNwYW4tMTIiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaHRtbC1ibG9jayBzcXMtYmxvY2staHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3FzLWJsb2NrLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOnByZS13cmFwO2ZvbnQtc2l6ZTogMzBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzcXNydGUtdGV4dC1jb2xvci0tZGFya0FjY2VudCI+S0FGRkU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtmb250LXNpemU6MTZweDsiIGNsYXNzPSJzcXNydGUtbGFyZ2UiPmthZmZlIGlzIGFuIEZQTyBlc3RhYmxpc2hlZCBpbiB0aGUgeWVhciAyMDE1IHNwcmVhZCBvdmVyIHR3byBzdGF0ZXMgbmFtZWx5IGtlcmFsYSBhbmQgdGFtaWxuYWR1IHdpdGggOTAwMCBtZW1iZXIgZmFybWVycyBkZWRpY2F0ZWQgdG8gdGhlIHZhbHVlcyBvZiBmYWlydHJhZGUgYW5kIG9yZ2FuaWMgY3VsdGl2YXRpb24uIFRoZSBtYWluIG9iamVjdGl2ZSBvZiBLYWZmZSBpcyB0byBlbnN1cmUgdGhlIHJpZ2h0ZnVsIG1hcmtldCBzaGFyZSBvZiBzbWFsbCBzY2FsZSBmYXJtZXJzIGZvciB0aGVpciBwcm9kdWNlcyB0aHJvdWdoIGZhaXJ0cmFkZSBzeXN0ZW0gd2l0aG91dCB0YW1wZXJpbmcgdGhlIGludGVyZXN0IG9mIHRoZSBidXllcnMuIFRodXMgd2UgYXJlIGdyb3dpbmcgcHJvZHVjdHMgd2hpY2ggYXJlIGVudmlyb25tZW50YWxseSBzYWZlIGFuZCBzb2NpYWxseSBlcXVpdGFibGUuPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgc3Bhbi0xMiIgPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNxcy1ibG9jayBodG1sLWJsb2NrIHNxcy1ibG9jay1odG1sIiA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2stY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6cHJlLXdyYXA7Zm9udC1zaXplOiAzMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNxc3J0ZS10ZXh0LWNvbG9yLS1kYXJrQWNjZW50Ij5OaWxnaXJpcyBEZXZlbG9wbWVudCBTb2NpZXR5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6cHJlLXdyYXA7Zm9udC1zaXplOjE0cHg7IiBjbGFzcz0ic3FzcnRlLWxhcmdlIj5OaWxnaXJpcyBEZXZlbG9wbWVudCBTb2NpZXR5IChORFMpIGlzIGEgcmVnaXN0ZXJlZCBOR08gd2l0aCBSZWcuTm8uMTQ4LzIwOCwgd29ya2luZyBmb3IgdGhlIHVwbGlmdG1lbnQgb2YgdGhlIHJ1cmFsIHBvb3IgYW5kIFRhbWlsIHBvbGl0aWNhbCByZWZ1Z2VlcyBhbmQgcmVwYXJ0ZWVzIGZyb20gU3JpIGxhbmthIHdobyBhcmUgcmVzaWRpbmcgaW4gdGhlIE5pbGdpcmkgZGlzdHJpY3QgaW4gVGFtaWxuYWR1IGluIFNvdXRoIEluZGlhLiBUaGUgZnVuY3Rpb25pbmcgb2YgdGhlIHNvY2lldHkgYmVnYW4gaW4gMjAwOCB1bmRlciB0aGUgZGlyZWN0IHBhdHJvbmFnZSBvZiB0aGUgQmlzaG9wIG9mIE1hbmFudGhhdmFkeSBEaW9jZXNlLiBUaGlzIHNvY2lldHkgaXMgdGhlIHNvY2lhbCBzZXJ2aWNlIHdpbmcgb2YgdGhlIENhdGhvbGljIERpb2Nlc2Ugb2YgTWFuYW50aGF2YWR5IG9wZXJhdGluZyBpbiB0aGUgTmlsZ2lyaSBkaXN0cmljdCBvZiBUYW1pbG5hZHUgaW4gU291dGggSW5kaWEuIEl0IGRvZXMgdW5kZXJ0YWtlIHZhcmlvdXMgc29jaWFsIHdlbGZhcmUgcHJvZ3JhbW1lcyBmb3IgdGhlIHJ1cmFsIHdvbWVuIGFuZCBjaGlsZHJlbiBhbmQgeW91dGgsIHdvcmtpbmcgaW4gdGhlIFRlYSBFc3RhdGVzIGluIHRoZSBOaWxnaXJpcyBEaXN0cmljdC48L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcXMtYmxvY2sgaG9yaXpvbnRhbHJ1bGUtYmxvY2sgc3FzLWJsb2NrLWhvcml6b250YWxydWxlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3NlY3Rpb24+CgoKICAgICAgIAoKICAgICAgPC9hcnRpY2xlPgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDxNYWluRm9vdGVyPjwvTWFpbkZvb3Rlcj4KPC9kaXY+Cg=="},null]}